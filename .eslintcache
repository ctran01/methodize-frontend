[{"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/index.js":"1","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/App.js":"2","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/context/AuthContext.js":"3","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Routes.js":"4","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/context/store/UserStore.js":"5","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/context/store/TasklistStore.js":"6","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/context/store/TaskStore.js":"7","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/context/store/ProjectStore.js":"8","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/context/store/TeamStore.js":"9","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/AuthRoutes.js":"10","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/LandingPage/LandingRoutes.js":"11","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/context/reducer/TaskReducer.js":"12","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/context/reducer/UserReducer.js":"13","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/context/reducer/ProjectReducer.js":"14","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/context/reducer/TasklistReducer.js":"15","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/context/reducer/TeamReducer.js":"16","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Pages/Projects.js":"17","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Pages/Team.js":"18","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Pages/Project.js":"19","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Pages/Tasks.js":"20","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Pages/Home.js":"21","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Pages/NewTasks.js":"22","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/LandingPage/RegisterPage.js":"23","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/NavigationBar/LeftNavBar.js":"24","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/LandingPage/LoginPage.js":"25","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/config/apiServer.js":"26","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/LandingPage/LandingPage.js":"27","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/LandingPage/Onboard.js":"28","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Loader.js":"29","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/NavigationBar/TopNavBar.js":"30","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/NavigationBar/TopNavBarHome.js":"31","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/NavigationBar/TopNavBarTask.js":"32","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/config/index.js":"33","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/projects/NewProjectTile.js":"34","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/tasks/PopOutTask.js":"35","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/projects/ProjectItemHome.js":"36","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/projects/ProjectTile.js":"37","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/tasks/TaskDetailsForm.js":"38","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/tasks/TaskItemHome.js":"39","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/tasks/TaskItemTask.js":"40","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Forms/AddTaskForm.js":"41","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/tasks/TaskSection.js":"42","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/tasks/TaskListItem.js":"43","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/teams/NewTeamMemberIcon.js":"44","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Forms/AddTaskProjectForm.js":"45","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/teams/TeamMemberIcon.js":"46","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Forms/TeamForm.js":"47","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Forms/TaskListForm.js":"48","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Forms/LoginForm.js":"49","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/assets/Home.js":"50","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/assets/Logo.js":"51","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/assets/project.js":"52","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/assets/Add.js":"53","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/assets/tasks.js":"54","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/assets/alert.js":"55","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/assets/search.js":"56","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Forms/ProjectForm.js":"57","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/NavigationBar/UserAvatar.js":"58","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/tasks/TaskItemProject.js":"59","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Forms/AddMemberForm.js":"60","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/tasks/ColumnTasklist.js":"61","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/tasks/ColumnTaskItem.js":"62"},{"size":387,"mtime":1608083548331,"results":"63","hashOfConfig":"64"},{"size":1851,"mtime":1607982896422,"results":"65","hashOfConfig":"64"},{"size":104,"mtime":1607369643885,"results":"66","hashOfConfig":"64"},{"size":508,"mtime":1606848376103,"results":"67","hashOfConfig":"64"},{"size":449,"mtime":1607369643914,"results":"68","hashOfConfig":"64"},{"size":500,"mtime":1607369643909,"results":"69","hashOfConfig":"64"},{"size":450,"mtime":1608238733157,"results":"70","hashOfConfig":"64"},{"size":474,"mtime":1607369643906,"results":"71","hashOfConfig":"64"},{"size":450,"mtime":1607369643912,"results":"72","hashOfConfig":"64"},{"size":3180,"mtime":1608270350497,"results":"73","hashOfConfig":"64"},{"size":779,"mtime":1607369511845,"results":"74","hashOfConfig":"64"},{"size":365,"mtime":1608229933494,"results":"75","hashOfConfig":"64"},{"size":193,"mtime":1607369643903,"results":"76","hashOfConfig":"64"},{"size":460,"mtime":1607369643894,"results":"77","hashOfConfig":"64"},{"size":318,"mtime":1607369643898,"results":"78","hashOfConfig":"64"},{"size":308,"mtime":1607369643901,"results":"79","hashOfConfig":"64"},{"size":222,"mtime":1608760205606,"results":"80","hashOfConfig":"64"},{"size":3694,"mtime":1607369544367,"results":"81","hashOfConfig":"64"},{"size":14346,"mtime":1608782973223,"results":"82","hashOfConfig":"64"},{"size":3562,"mtime":1607983552722,"results":"83","hashOfConfig":"64"},{"size":4520,"mtime":1608443835936,"results":"84","hashOfConfig":"64"},{"size":2878,"mtime":1608438933445,"results":"85","hashOfConfig":"64"},{"size":3540,"mtime":1607369511865,"results":"86","hashOfConfig":"64"},{"size":5780,"mtime":1608083409869,"results":"87","hashOfConfig":"64"},{"size":841,"mtime":1607369511852,"results":"88","hashOfConfig":"64"},{"size":467,"mtime":1607976354295,"results":"89","hashOfConfig":"64"},{"size":3401,"mtime":1607369511843,"results":"90","hashOfConfig":"64"},{"size":3243,"mtime":1607978384299,"results":"91","hashOfConfig":"64"},{"size":143,"mtime":1606848376069,"results":"92","hashOfConfig":"64"},{"size":3965,"mtime":1608073630721,"results":"93","hashOfConfig":"64"},{"size":4182,"mtime":1608073492514,"results":"94","hashOfConfig":"64"},{"size":4287,"mtime":1608073631832,"results":"95","hashOfConfig":"64"},{"size":251,"mtime":1606848381423,"results":"96","hashOfConfig":"64"},{"size":1056,"mtime":1607369558071,"results":"97","hashOfConfig":"64"},{"size":15472,"mtime":1608935849858,"results":"98","hashOfConfig":"64"},{"size":2101,"mtime":1608008621276,"results":"99","hashOfConfig":"64"},{"size":1264,"mtime":1607369558073,"results":"100","hashOfConfig":"64"},{"size":6431,"mtime":1608328201447,"results":"101","hashOfConfig":"64"},{"size":3038,"mtime":1608007269891,"results":"102","hashOfConfig":"64"},{"size":2816,"mtime":1608439099220,"results":"103","hashOfConfig":"64"},{"size":8827,"mtime":1607369501712,"results":"104","hashOfConfig":"64"},{"size":1121,"mtime":1607982655510,"results":"105","hashOfConfig":"64"},{"size":3473,"mtime":1607369582506,"results":"106","hashOfConfig":"64"},{"size":1305,"mtime":1607369592304,"results":"107","hashOfConfig":"64"},{"size":5487,"mtime":1607369501716,"results":"108","hashOfConfig":"64"},{"size":521,"mtime":1607369592311,"results":"109","hashOfConfig":"64"},{"size":2803,"mtime":1607369501738,"results":"110","hashOfConfig":"64"},{"size":2559,"mtime":1607369501734,"results":"111","hashOfConfig":"64"},{"size":3075,"mtime":1607371355071,"results":"112","hashOfConfig":"64"},{"size":1221,"mtime":1608269543757,"results":"113","hashOfConfig":"64"},{"size":1659,"mtime":1608269486335,"results":"114","hashOfConfig":"64"},{"size":2932,"mtime":1608269543756,"results":"115","hashOfConfig":"64"},{"size":1176,"mtime":1608269486335,"results":"116","hashOfConfig":"64"},{"size":2211,"mtime":1608269486335,"results":"117","hashOfConfig":"64"},{"size":2081,"mtime":1608269486346,"results":"118","hashOfConfig":"64"},{"size":1796,"mtime":1608269522091,"results":"119","hashOfConfig":"64"},{"size":4143,"mtime":1607369501732,"results":"120","hashOfConfig":"64"},{"size":722,"mtime":1607369525835,"results":"121","hashOfConfig":"64"},{"size":1574,"mtime":1608269203323,"results":"122","hashOfConfig":"64"},{"size":3301,"mtime":1607369501709,"results":"123","hashOfConfig":"64"},{"size":3019,"mtime":1608782947147,"results":"124","hashOfConfig":"64"},{"size":1687,"mtime":1608783000886,"results":"125","hashOfConfig":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},"1sdex4x",{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"128"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"128"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"128"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"128"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"128"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"128"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"128"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"128"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"128"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"206","messages":"207","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"128"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"128"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"128"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"128"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"128"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"128"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"128"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"128"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"128"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"128"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"128"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"128"},"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/index.js",[],["272","273"],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/App.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/context/AuthContext.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Routes.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/context/store/UserStore.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/context/store/TasklistStore.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/context/store/TaskStore.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/context/store/ProjectStore.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/context/store/TeamStore.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/AuthRoutes.js",["274","275","276","277","278"],"import React, { useState, useContext, useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport HomePage from \"./Pages/Home\";\nimport TasksPage from \"./Pages/Tasks\";\nimport ProjectPage from \"./Pages/Project\";\nimport ProjectsPage from \"./Pages/Projects\";\nimport TeamPage from \"./Pages/Team\";\nimport NewTasksPage from \"./Pages/NewTasks\";\nimport \"../css/Navbar.css\";\nimport LeftNavBar from \"./NavigationBar/LeftNavBar\";\n\nimport { Context as UserContext } from \"../context/store/UserStore\";\nimport { Context as TaskContext } from \"../context/store/TaskStore\";\nimport { Context as ProjectContext } from \"../context/store/ProjectStore\";\nimport { Context as TeamContext } from \"../context/store/TeamStore\";\n\nimport apiServer from \"../config/apiServer\";\n\nconst AuthRoutes = () => {\n  const [sidebar, setSidebar] = useState(true);\n  const showSidebar = () => setSidebar(!sidebar);\n  const [taskState, taskdispatch] = useContext(TaskContext);\n  const [userState, userdispatch] = useContext(UserContext);\n  const [projectState, projectdispatch] = useContext(ProjectContext);\n  const [teamState, teamdispatch] = useContext(TeamContext);\n\n  //Maybe grab all information here and state goes down to child components?\n  const getUserInfo = async () => {\n    const id = localStorage.getItem(\"userId\");\n    const res = await apiServer.get(`/user/${id}`);\n    await userdispatch({ type: \"get_user_info\", payload: res.data });\n  };\n\n  const getUserTasks = async () => {\n    const id = localStorage.getItem(\"userId\");\n    const res = await apiServer.get(`/task/user/${id}`);\n    await taskdispatch({ type: \"get_user_tasks\", payload: res.data });\n  };\n\n  const getUserTeams = async () => {\n    const id = localStorage.getItem(\"userId\");\n    const res = await apiServer.get(`/team/user/${id}`);\n    await teamdispatch({ type: \"get_user_teams\", payload: res.data });\n  };\n\n  const getUserProjects = async () => {\n    const id = localStorage.getItem(\"userId\");\n    const res = await apiServer.get(`/project/user/${id}`);\n    await projectdispatch({\n      type: \"get_user_projects\",\n      payload: res.data,\n    });\n  };\n\n  useEffect(() => {\n    getUserInfo();\n    getUserTasks();\n    getUserTeams();\n    getUserProjects();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className=\"overlay\">\n      <BrowserRouter>\n        <LeftNavBar showSidebar={showSidebar} sidebar={sidebar} />\n        <div className=\"overlay-right-container\">\n          <Switch>\n            <Route exact path=\"/\" component={HomePage} />\n            <Route exact path=\"/tasks\" component={NewTasksPage} />\n            <Route exact path=\"/projects\" component={ProjectsPage} />\n            <Route\n              path=\"/team/:teamId/project/:projectId/:projectName\"\n              component={ProjectPage}\n            />\n            <Route path=\"/team/:teamId/:teamName\" component={TeamPage} />\n            <Route\n              path=\"/*\"\n              render={() => {\n                return <Redirect to=\"/\" />;\n              }}\n            />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default AuthRoutes;\n","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/LandingPage/LandingRoutes.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/context/reducer/TaskReducer.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/context/reducer/UserReducer.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/context/reducer/ProjectReducer.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/context/reducer/TasklistReducer.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/context/reducer/TeamReducer.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Pages/Projects.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Pages/Team.js",["279"],"import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport TopNavBar from \"../NavigationBar/TopNavBar\";\nimport apiServer from \"../../config/apiServer\";\nimport Loader from \"../Loader\";\nimport \"../../css/TeamPage.css\";\nimport TeamMemberIcon from \"../teams/TeamMemberIcon\";\nimport ProjectTile from \"../projects/ProjectTile\";\nimport NewProjectTile from \"../projects/NewProjectTile\";\nimport NewTeamMemberIcon from \"../teams/NewTeamMemberIcon\";\n\nconst TeamPage = () => {\n  const { teamId, teamName } = useParams();\n  const [team, setTeam] = useState();\n  const [teamProjects, setTeamProjects] = useState();\n  const [teamUsers, setTeamUsers] = useState();\n  const [teamDescription, setTeamDescription] = useState();\n  const [loading, setLoading] = useState(true);\n\n  const getTeam = async () => {\n    try {\n      const res = await apiServer.get(`/team/${teamId}`);\n      setTeam(res.data);\n      setTeamProjects(res.data.Projects);\n      setTeamUsers(res.data.Users);\n      setTeamDescription(res.data.description);\n      setLoading(false);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const handleUpdate = (e) => {\n    setTeamDescription(e.target.value);\n  };\n\n  const updateDescription = async (e) => {\n    const description = e.target.value;\n    await apiServer.put(`/team/${teamId}/description`, { description });\n    console.log(e.target.value);\n  };\n\n  useEffect(() => {\n    getTeam();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [teamId, teamName, setTeam, setTeamProjects, setTeamUsers]);\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  const membersList = teamUsers.map((user, i) => {\n    return <TeamMemberIcon user={user} key={i} />;\n  });\n\n  const projectsList = teamProjects.map((project, i) => {\n    return (\n      <ProjectTile teamId={teamId} project={project} key={i} id={project.id} />\n    );\n  });\n  return (\n    <div>\n      <TopNavBar name={teamName} setTeamProjects={setTeamProjects} />\n      <div className=\"team-page-container\">\n        <div className=\"team-page-content-container\">\n          <div className=\"team-page-content-left\">\n            <div className=\"team-content-left-description-container\">\n              <div className=\"team-content-left-description-header\">\n                <div className=\"team-content-title\">Description</div>\n              </div>\n              <form className=\"team-content-left-description-form\">\n                <textarea\n                  className=\"edit-description\"\n                  placeholder=\"Click to add team description...\"\n                  value={teamDescription}\n                  onChange={handleUpdate}\n                  onBlur={updateDescription}\n                ></textarea>\n              </form>\n            </div>\n            <div className=\"team-content-left-members-container\">\n              <div className=\"team-content-left-members-header\">\n                <div className=\"team-content-title\">Members</div>\n              </div>\n              <div className=\"team-content-left-members--list\">\n                {membersList}\n                <NewTeamMemberIcon\n                  setTeamUsers={setTeamUsers}\n                  teamId={teamId}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"team-page-content-right\">\n            <div className=\"team-content-right-header\">\n              <div className=\"team-content-title\">Projects</div>\n            </div>\n            <div className=\"team-content-right-projects--list\">\n              {projectsList}\n              <NewProjectTile />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TeamPage;\n","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Pages/Project.js",["280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307"],"import React, { useEffect, useState, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Modal, responsiveFontSizes } from \"@material-ui/core\";\nimport apiServer from \"../../config/apiServer\";\nimport Loader from \"../Loader\";\nimport TopNavBar from \"../NavigationBar/TopNavBar\";\nimport TaskListItem from \"../tasks/TaskListItem\";\nimport TaskListForm from \"../Forms/TaskListForm\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport AddTaskProjectForm from \"../Forms/AddTaskProjectForm\";\nimport TaskDetailsForm from \"../tasks/TaskDetailsForm\";\n\nimport \"../../css/Project.css\";\nimport \"../../css/TaskList.css\";\nimport ColumnTasklist from \"../tasks/ColumnTasklist\";\n\nconst ProjectPage = () => {\n  const { projectId, projectName, teamId } = useParams();\n  const [openTasklistForm, setOpenTasklistForm] = useState(false);\n  const [tasks, setTasks] = useState();\n  const [project, setProject] = useState();\n  const [tasklists, setTasklists] = useState();\n\n  const [openTaskProjectForm, setOpenTaskProjectForm] = useState(false);\n  const [tasklistTasks, setTasklistTasks] = useState();\n  const [openTaskDetailForm, setOpenTaskDetailForm] = useState(false);\n\n  //Task through get /project/id/taskslists. Set here so we can refer to it in the ondragend funnction\n  const [loading, setLoading] = useState(true);\n\n  const openTasklistFormModal = () => {\n    setOpenTasklistForm(true);\n  };\n\n  const closeTasklistFormModal = () => {\n    setOpenTasklistForm(false);\n  };\n\n  const openTaskDetailFormModal = () => {\n    setOpenTaskDetailForm(true);\n  };\n\n  const closeTaskDetailFormModal = () => {\n    setOpenTaskDetailForm(false);\n  };\n\n  const onDragEnd = async (result) => {\n    console.log(result, \"result\");\n    const { destination, source, draggableId, type } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    if (type === \"column\") {\n      const redorderedLists = reorderTasklists(\n        tasklists,\n        source.index,\n        destination.index\n      );\n\n      setTasklists(redorderedLists);\n      console.log(redorderedLists, \"reordedLists\");\n      redorderedLists.map((list, index) => {\n        return updateTasklist(index, list.id, list.column_index);\n      });\n    }\n\n    if (type === \"task\") {\n      updateTasks(source, destination, draggableId);\n      const destinationTasklistId = destination.droppableId.split(\"-\")[0];\n      const destinationIndexId = destination.droppableId.split(\"-\")[1];\n      const sourceTasklistId = source.droppableId.split(\"-\")[0];\n      const sourceIndexId = source.droppableId.split(\"-\")[1];\n      const destinationTaskIndex = destination.index;\n      const sourceTaskIndex = source.index;\n      //DroppableID of column ${tasklist.id.toString()}-${index.toString()}\n\n      // console.log(\n      //   tasklists[sourceIndexId].Tasks,\n      //   \"tasklists[sourceIndexId] before\"\n      // );\n\n      // tasklists[sourceIndexId].Tasks = [];\n\n      // console.log(\n      //   tasklists[sourceIndexId].Tasks,\n      //   \"tasklists[sourceIndexId] after\"\n      // );\n\n      //sets source tasklist\n      let sourceTasklist = tasklists[sourceIndexId].Tasks;\n      //sets destination tasklist\n      let destinationTasklist = tasklists[destinationIndexId].Tasks;\n\n      reorderTasks(sourceTasklist, destinationTasklist, source, destination);\n      // //returns [new source tasklist, new destination tasklist]\n      // let newSourceTasklist = newTasklists[0];\n      // let newDestinationTasklist = newTasklists[1];\n      // tasklists[sourceIndexId].Tasks = newSourceTasklist;\n      // tasklists[destinationIndexId].Tasks = newDestinationTasklist;\n      // console.log(tasklists, \"tasklists after reorder\");\n      // console.log(\"source: \", source);\n      // console.log(\"destination: \", destination);\n      // console.log(\"draggableId: \", draggableId);\n      // console.log(\"type: \", type);\n\n      // console.log(tasklists, \"tasklists after updating\");\n      // tasklists.map((task, index) => {\n      //   return updateTasks(\n      //     index,\n      //     task.id,\n      //     task.task_index,\n      //     sourceTasklistId,\n      //     destinationTasklistId\n      //   );\n      // });\n\n      //tasklists.map((tasklist,index)=>{\n      //   tasklist.task.map((task,index)=>{\n      // return updateTasks(\n\n      // )\n      //   })\n      // })\n    }\n  };\n\n  const reorderTasklists = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n  };\n\n  const reorderTasks = (\n    sourceTasklist,\n    destinationTasklist,\n    source,\n    destination\n  ) => {\n    let sourceTask = sourceTasklist.splice(source.index, 1);\n    destinationTasklist.splice(destination.index, 0, sourceTask[0]);\n    // return [sourceTasklist, destinationTasklist];\n    // console.log(sourceTasklist);\n    // console.log(destinationTasklist, \"destinationTasklist\");\n    //splice source task and insert into destination tasklist\n    //return new sourcetasklist and new desinationtasklist\n  };\n\n  const updateTasklist = async (newIndex, tasklistId, columnIndex) => {\n    await apiServer.put(`/tasklist/${tasklistId}/columnindex/`, { newIndex });\n  };\n\n  const updateTasks = async (source, destination, draggableId) => {\n    const sourceColumnId = source.droppableId;\n    const destinationTasklistId = destination.droppableId.split(\"-\")[0];\n    const destinationIndexId = destination.droppableId.split(\"-\")[1];\n    const sourceTasklistId = source.droppableId.split(\"-\")[0];\n    const sourceIndexId = source.droppableId.split(\"-\")[1];\n    const taskId = draggableId;\n    const updatedTasklist = await apiServer.put(`/task/${taskId}/tasklist`, {\n      destinationTasklistId,\n    }); // this will update the inital task with the new tasklist id\n\n    //Draggable Id === Task.id\n    //source.droppableId[0] === initial tasklist.id\n    //destination.droppableId[0] === destination tasklist.id\n\n    // once that comes back, we want to update the task_index of that task to destination.index\n    const destinationIndex = destination.index; //index of task in tasklist\n    const updatedTaskIndex = await apiServer.put(`/task/${taskId}/taskindex`, {\n      destinationIndex,\n    });\n\n    // once that comes back, we will  update task_indexes for tasklists then re render\n  };\n\n  const getProject = async () => {\n    try {\n      const res = await apiServer.get(`/project/${projectId}`);\n      // await getTasklists();\n      const resp = await apiServer.get(`/project/${projectId}/tasklists`);\n      setProject(res.data);\n      setTasklists(resp.data);\n      // console.log(tasklists);\n      setLoading(false);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  //NOTE: MAYBE TRY GRABBING TASKS IN ONE GET API CALL AND PUSHING IT DOWN?\n  const getTasklists = async () => {\n    try {\n      const res = await apiServer.get(`/project/${projectId}/tasklists`);\n      setTasklists(res.data);\n\n      // setTasks(res.data.Tasks);\n      // const taskResponse = await apiServer.get(`/project/${projectId}/tasks`);\n      // setTaskArray(taskResponse.data); //Array of all tasks\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  const openTaskProjectFormModal = () => {\n    setOpenTaskProjectForm(true);\n  };\n\n  const closeTaskProjectFormModal = () => {\n    setOpenTaskProjectForm(false);\n  };\n\n  // const updateTasks = async () => {\n  //   //returns individual tasklist tasks\n  //   const res = await apiServer.get(`/tasklist/${tasklist.id}/tasks`);\n  //   setTasklistTasks(res.data);\n  //   setLoading(false);\n  // };\n\n  useEffect(() => {\n    getProject();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [setProject, setTasklists, setTasks]);\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  //Task list creation\n  const tasklistFormModal = (\n    <div className=\"modal-container\">\n      <TaskListForm\n        setTasklists={setTasklists}\n        projectId={projectId}\n        clickClose={closeTasklistFormModal}\n        open={openTasklistForm}\n      ></TaskListForm>\n    </div>\n  );\n\n  const renderedTasklists = tasklists.map((tasklist, index) => {\n    return (\n      <ColumnTasklist\n        tasklist={tasklist}\n        index={index}\n        setTasklists={setTasklists}\n      />\n    );\n  });\n  // const renderedTasklists = tasklists.map((tasklist, index) => {\n  //   //returns individual tasklist tasks\n\n  //   return (\n  //     <div key={tasklist.id}>\n  //       <Draggable\n  //         type=\"tasklist\"\n  //         draggableId={`Column-${tasklist.column_index.toString()}`}\n  //         index={index}\n  //         key={`Column-${tasklist.id.toString()}`}\n  //       >\n  //         {(provided) => (\n  //           <div\n  //             className=\"tasklist-container\"\n  //             {...provided.draggableProps}\n  //             ref={provided.innerRef}\n  //             {...provided.dragHandleProps}\n  //           >\n  //             <div className=\"tasklist-header\">{tasklist.name}</div>\n  //             <div className=\"tasklist-add-task--button\"></div>\n  //             <Droppable\n  //               type=\"task\"\n  //               droppableId={`${tasklist.id.toString()}-${index.toString()}`}\n  //             >\n  //               {(provided) => (\n  //                 <div\n  //                   className=\"tasklist-task--list\"\n  //                   ref={provided.innerRef}\n  //                   {...provided.droppableProps}\n  //                 >\n  //                   {/* //----------------------------------TaskItemProject */}\n  //                   {tasklist.Tasks.map((task, index) => {\n  //                     return (\n  //                       <div key={task.id}>\n  //                         <Draggable\n  //                           draggableId={`${task.id.toString()}`}\n  //                           type=\"task\"\n  //                           key={`${task.id}`}\n  //                           //this index needs to pull from tasksArray\n  //                           index={index}\n  //                         >\n  //                           {(provided, snapshot) => (\n  //                             <div\n  //                               {...provided.draggableProps}\n  //                               {...provided.dragHandleProps}\n  //                               ref={provided.innerRef}\n  //                               className=\"task-project-item\"\n  //                               onClick={openTaskDetailFormModal}\n  //                             >\n  //                               {task.name}\n  //                             </div>\n  //                           )}\n  //                         </Draggable>\n  //                         <div>\n  //                           <Modal\n  //                             open={openTaskDetailForm}\n  //                             onClose={closeTaskDetailFormModal}\n  //                             style={{ backgroundColor: \"white\" }}\n  //                           >\n  //                             <div className=\"modal-container\">\n  //                               <TaskDetailsForm\n  //                                 // setTasks={setTasks}\n  //                                 setTasklistTasks={setTasklistTasks}\n  //                                 task={task}\n  //                                 closeModal={closeTaskDetailFormModal}\n  //                               />\n  //                             </div>\n  //                           </Modal>\n  //                         </div>\n  //                       </div>\n  //                     );\n  //                   })}\n  //                   {provided.placeholder}\n  //                 </div>\n  //               )}\n  //             </Droppable>\n\n  //             <div\n  //               className=\"tasklist-new-task--button\"\n  //               onClick={openTaskProjectFormModal}\n  //             >\n  //               + Add task\n  //             </div>\n  //           </div>\n  //         )}\n  //       </Draggable>\n  //       <div>\n  //         <Modal\n  //           className=\"modal\"\n  //           style={{ backgroundColor: \"white\" }}\n  //           open={openTaskProjectForm}\n  //           onClose={closeTaskProjectFormModal}\n  //         >\n  //           <div className=\"modal-container\">\n  //             <AddTaskProjectForm\n  //               setTasklists={setTasklists}\n  //               setTasklistTasks={setTasklistTasks}\n  //               tasklistId={tasklist.id}\n  //               projectId={tasklist.project_id}\n  //               clickClose={closeTaskProjectFormModal}\n  //               open={openTaskProjectForm}\n  //             ></AddTaskProjectForm>\n  //           </div>\n  //         </Modal>\n  //       </div>\n  //     </div>\n  //   );\n  // });\n\n  //----------------------------------------------Project\n  return (\n    <div>\n      <div>\n        <TopNavBar name={project.name} setTasklists={setTasklists} />\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable\n            droppableId=\"all-columns\"\n            direction=\"horizontal\"\n            type=\"column\"\n          >\n            {(provided) => (\n              <div\n                className=\"project-container\"\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n              >\n                {renderedTasklists}\n                {/* {tasklists.map((tasklist, i) => {\n                  return ( */}\n                {/* <TaskListItem\n                      index={i}\n                      teamId={teamId}\n                      tasklist={tasklist}\n                      key={tasklist.id}\n                    /> */}\n\n                {/* );\n                })} */}\n                <div\n                  className=\"tasklist-new-tasklist--button\"\n                  onClick={openTasklistFormModal}\n                >\n                  + Add List\n                </div>\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </div>\n      <Modal open={openTasklistForm} onClose={closeTasklistFormModal}>\n        {tasklistFormModal}\n      </Modal>\n    </div>\n  );\n};\n\nexport default ProjectPage;\n","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Pages/Tasks.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Pages/Home.js",["308","309","310","311"],"import React, { useContext } from \"react\";\n\nimport { Context as UserContext } from \"../../context/store/UserStore\";\nimport { Context as TaskContext } from \"../../context/store/TaskStore\";\nimport { Context as ProjectContext } from \"../../context/store/ProjectStore\";\nimport TaskItemHome from \"../tasks/TaskItemHome\";\nimport TopNavBarHome from \"../NavigationBar/TopNavBarHome\";\nimport ProjectTile from \"../projects/ProjectTile\";\nimport NewProjectTile from \"../projects/NewProjectTile\";\nimport homeImage from \"../../assets/codeVersion.png\";\nimport Add from \"../../assets/Add\";\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\nimport { Link } from \"react-router-dom\";\nimport ProjectItemHome from \"../projects/ProjectItemHome\";\n\nconst HomePage = () => {\n  const [userState] = useContext(UserContext);\n  const [taskState] = useContext(TaskContext);\n  const [projectState] = useContext(ProjectContext);\n\n  const uncompletedTasklist = taskState.tasks.filter(\n    (task) => task.completed === false\n  );\n\n  const sortedTaskList = uncompletedTasklist.sort(function (a, b) {\n    return new Date(b.due_date) - new Date(a.due_date);\n  });\n\n  // const upcomingTasklist = sortedTaskList\n  //   .slice(sortedTaskList.length - 4)\n  //   .reverse();\n\n  const taskList = sortedTaskList.map((task, i) => {\n    return !task.completed && <TaskItemHome task={task} key={i} />;\n  });\n\n  const projectLists = projectState.projects.slice(0, 4);\n\n  const projectTiles = projectLists.map((project, i) => {\n    return <ProjectItemHome project={project} key={i} id={project.id} />;\n    // return <ProjectTile project={project} key={i} id={project.id} />;\n  });\n\n  return (\n    <>\n      <TopNavBarHome />\n      <section className=\"home-container\">\n        {/* <div className=\"home-container\"> */}\n        <div className=\"home-welcome-header\">\n          <div>\n            <p className=\"home-welcome-message\">Hi, {userState.user.name}!</p>\n            <p style={{ display: \"flex\", alignSelf: \"center\" }}>\n              Welcome to your dashboard.\n            </p>\n          </div>\n        </div>\n        <div className=\"home-main-content-container\">\n          <div className=\"home-tasks-container\">\n            <div className=\"home-tasks-header\">\n              <div>\n                <h2\n                  style={{\n                    color: \"#151b26\",\n                    fontWeight: 500,\n                    fontSize: \"20px\",\n                  }}\n                >\n                  Tasks Due Soon\n                </h2>\n              </div>\n              <div>\n                <Link\n                  to=\"/tasks\"\n                  style={{ textDecoration: \"none\", color: \"blue\" }}\n                >\n                  <p style={{ fontSize: \"14px\" }}>See all my tasks</p>\n                </Link>\n              </div>\n            </div>\n            <div className=\"home-tasks--list\">\n              {/* call get all tasks for specific user route */}\n              {taskList}\n              <div className=\"new-home-item-container\">\n                <div className=\"new-home-icon-container\">\n                  <Add className=\"new-home-item-icon\" />\n                </div>\n                <div className=\"new-home-item-name\">Create Task</div>\n              </div>\n            </div>\n          </div>\n          <div className=\"home-projects-container\">\n            <div className=\"home-projects-header\">\n              <div>\n                <h2\n                  style={{\n                    color: \"#151b26\",\n                    fontWeight: 500,\n                    fontSize: \"20px\",\n                  }}\n                >\n                  Projects\n                </h2>\n              </div>\n              <div>\n                <Link\n                  to=\"/tasks\"\n                  style={{ textDecoration: \"none\", color: \"blue\" }}\n                >\n                  <p style={{ fontSize: \"14px\" }}>See all my projects</p>\n                </Link>\n              </div>\n            </div>\n            <div className=\"home-projects--list\">\n              {/* call get all projects for specific user route */}\n              {projectTiles}\n              <div className=\"new-home-item-container\">\n                <div className=\"new-home-icon-container\">\n                  <Add className=\"new-home-item-icon\" />\n                </div>\n                <div className=\"new-home-item-name\">Create Project</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        {/* </div> */}\n      </section>\n    </>\n  );\n};\n\nexport default HomePage;\n","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Pages/NewTasks.js",["312","313","314","315","316"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport TopNavBarTask from \"../NavigationBar/TopNavBarTask\";\r\nimport { Context as TaskContext } from \"../../context/store/TaskStore\";\r\nimport apiServer from \"../../config/apiServer\";\r\nimport TaskSection from \"../tasks/TaskSection\";\r\nimport PopOutTask from \"../tasks/PopOutTask\";\r\nimport TaskItemTask from \"../tasks/TaskItemTask\";\r\nimport Add from \"../../assets/Add\";\r\nimport { RiNurseFill } from \"react-icons/ri\";\r\n\r\nconst NewTasks = () => {\r\n  const [taskState, taskdispatch] = useContext(TaskContext);\r\n  const [loading, setLoading] = useState(true);\r\n  const [initialLoad, setInitialLoad] = useState(true);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [sideMenu, setSideMenu] = useState(false);\r\n  const showSideMenu = () => setSideMenu(!sideMenu);\r\n\r\n  const getUserTasks = async () => {\r\n    const id = localStorage.getItem(\"userId\");\r\n    const res = await apiServer.get(`/task/user/${id}`);\r\n    await taskdispatch({ type: \"get_user_tasks\", payload: res.data });\r\n    // setTasks(res.data);\r\n    setLoading(false);\r\n  };\r\n\r\n  const sortedTasks = taskState.tasks.sort(function (a, b) {\r\n    return new Date(a.due_date) - new Date(b.due_date);\r\n  });\r\n\r\n  const renderedTasks = sortedTasks.map((task, i) => {\r\n    return (\r\n      <TaskItemTask\r\n        task={task}\r\n        key={i}\r\n        showSideMenu={showSideMenu}\r\n        sideMenu={sideMenu}\r\n        setInitialLoad={setInitialLoad}\r\n      />\r\n    );\r\n  });\r\n  const openModal = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUserTasks();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <TopNavBarTask />\r\n      <div className=\"tasks-container\">\r\n        {/* <div className=\"tasks-container-header\"></div> */}\r\n        <div className=\"tasks-main-content\">\r\n          <div\r\n            className={\r\n              taskState.selectedTask || initialLoad\r\n                ? \"tasks-inner-container\"\r\n                : \"tasks-inner-container hidden\"\r\n            }\r\n          >\r\n            <div className=\"tasks-add-task-container\" onClick={openModal}>\r\n              <div className=\"tasks-add-task-icon\">\r\n                <Add />\r\n              </div>\r\n              <div className=\"add-task-button\">\r\n                <p style={{ margin: \"2px 0px 0px 0px\", paddingLeft: \"5px\" }}>\r\n                  Add Task\r\n                </p>\r\n              </div>\r\n            </div>\r\n            {renderedTasks}\r\n            {/* <TaskSection title={\"Tasks\"} tasks={sortedTasks} /> */}\r\n          </div>\r\n          {sideMenu && taskState.selectedTask ? (\r\n            <PopOutTask showSideMenu={showSideMenu} sideMenu={sideMenu} />\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewTasks;\r\n","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/LandingPage/RegisterPage.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/NavigationBar/LeftNavBar.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/LandingPage/LoginPage.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/config/apiServer.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/LandingPage/LandingPage.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/LandingPage/Onboard.js",["317"],"import React, { useContext, useState } from \"react\";\nimport AuthContext from \"../../context/AuthContext\";\nimport apiServer from \"../../config/apiServer\";\nimport { useForm } from \"react-hook-form\";\nimport \"../../css/LoginPage.css\";\n\nconst Onboard = (props) => {\n  const { register, handleSubmit, errors } = useForm();\n  const { setAuth } = useContext(AuthContext);\n\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const onboard = async ({ teamName }) => {\n    const email = localStorage.getItem(\"email\");\n    if (teamName) {\n      try {\n        const res = await apiServer.put(\"/register/onboard\", {\n          email,\n          teamName,\n        });\n        //sets initial token\n        localStorage.setItem(\"token\", res.data.token);\n        setErrorMessage(\"\");\n        //for Refresh\n        setAuth(res.data.token);\n      } catch (err) {\n        console.log(err.status);\n        setErrorMessage(\"Something went wrong\");\n      }\n    }\n  };\n\n  const onSkip = () => {\n    //sets initial token\n    localStorage.setItem(\"token\", localStorage.getItem(\"onboard\"));\n    //for component to refresh to redirect webpage\n    setAuth(localStorage.getItem(\"onboard\"));\n    localStorage.removeItem(\"onboard\");\n  };\n  return (\n    <div className=\"onboard-page-container\">\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          marginTop: \"200px\",\n        }}\n      >\n        <div className=\"onboard-page-header\">\n          <h1\n            style={{\n              fontWeight: \"500\",\n              marginBottom: \"20px\",\n              marginTop: \"1px\",\n              fontSize: \"24px\",\n            }}\n          >\n            What team will you be working on?\n          </h1>\n        </div>\n        <form className=\"onboard-page--form\" onSubmit={handleSubmit(onboard)}>\n          <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n            <label htmlFor=\"teamName\">Team Name</label>\n            <input name=\"teamName\" ref={register({ minLength: 2 })}></input>\n            {errors.teamName?.type === \"minLengh\" && (\n              <p style={{ color: \"red\", margin: \"1px\" }}>\n                Team name must be greater than 1 character\n              </p>\n            )}\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"space-between\",\n            }}\n          >\n            {/* <button\n              style={{\n                width: \"150px\",\n                border: \"1px solid #0093ff\",\n                backgroundColor: \"transparent\",\n                borderRadius: \"5px\",\n                color: \"black\",\n                outline: \"none\",\n                cursor: \"pointer\",\n              }}\n              onClick={onSkip}\n            >\n              Skip\n            </button> */}\n            <button\n              style={{\n                width: \"150px\",\n              }}\n              type=\"submit\"\n            >\n              Continue\n            </button>\n          </div>\n          {errorMessage ? (\n            <p style={{ color: \"red\", margin: \"1px\" }}>{errorMessage}</p>\n          ) : null}\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Onboard;\n","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Loader.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/NavigationBar/TopNavBar.js",["318","319","320","321","322","323","324","325","326","327","328","329"],"import React, { useContext, useState } from \"react\";\nimport AuthContext from \"../../context/AuthContext\";\nimport \"../../css/Navbar.css\";\nimport { GrAddCircle } from \"react-icons/gr\";\nimport UserAvatar from \"./UserAvatar\";\nimport { Menu, MenuItem } from \"@material-ui/core\";\nimport ProjectForm from \"../Forms/ProjectForm\";\nimport TaskForm from \"../Forms/AddTaskForm\";\nimport Search from \"../../assets/search\";\nimport messageIcon from \"../../assets/message.png\";\nimport Alert from \"../../assets/alert\";\nimport { Context as UserContext } from \"../../context/store/UserStore\";\n\nconst TopNavBar = ({ name, setTeamProjects, setTasklists }) => {\n  const { logout } = useContext(AuthContext);\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [anchorEle, setAnchorEle] = useState(null);\n  const [openProject, setOpenProject] = useState(false);\n  const [openTask, setOpenTask] = useState(false);\n  const [userState, userdispatch] = useContext(UserContext);\n\n  const clickOpenTask = () => {\n    setOpenTask(true);\n    handleNewClose();\n  };\n\n  const clickCloseTask = () => {\n    setOpenTask(false);\n  };\n\n  const clickOpenProject = () => {\n    setOpenProject(true);\n    handleNewClose();\n  };\n  const clickCloseProject = () => {\n    setOpenProject(false);\n  };\n\n  const handleNewClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleNewClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleProfClick = (event) => {\n    setAnchorEle(event.currentTarget);\n  };\n  const handleProfClose = () => {\n    setAnchorEle(null);\n  };\n\n  return (\n    <div className=\"top-nav-bar-container\">\n      <div className=\"top-nav-bar-left\">\n        <h2>{name}</h2>\n      </div>\n      <div className=\"top-nav-bar-middle\"></div>\n      <div className=\"top-nav-bar-right\" style={{}}>\n        {/* <div style={{ display: \"flex\" }}>\n          <input className=\"searchbar\" placeholder={\"Search\"}></input>\n        </div> */}\n        {/* <div>\n          <GrAddCircle onClick={handleNewClick} className=\"top-nav-bar--icon\" />\n          <Menu\n            style={{ marginTop: \"40px\" }}\n            anchorEl={anchorEl}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={handleNewClose}\n          >\n            <MenuItem onClick={clickOpenTask}>Add Task</MenuItem>\n            <TaskForm\n              handleNewClose={handleNewClose}\n              clickClose={clickCloseTask}\n              open={openTask}\n              setTasklists={setTasklists}\n            ></TaskForm>\n            <MenuItem onClick={clickOpenProject}>Add Project</MenuItem>\n            <ProjectForm\n              handleNewClose={handleNewClose}\n              clickClose={clickCloseProject}\n              open={openProject}\n              setTeamProjects={setTeamProjects}\n            />\n          </Menu>\n        </div> */}\n        <div\n          className=\"top-nav-icons\"\n          style={{ display: \"flex\", alignItems: \"center\" }}\n        >\n          <div>\n            <Alert />\n          </div>\n          <div>\n            <Search />\n          </div>\n\n          <div>\n            <img className=\"logo\" style={{}} src={messageIcon} alt=\"logo\" />\n          </div>\n        </div>\n\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n          }}\n        >\n          <div style={{ padding: \"0\" }}>\n            <UserAvatar id={localStorage.getItem(\"userId\")} />\n          </div>\n          <div>{userState.user.name}</div>\n          <div\n            onClick={handleProfClick}\n            style={{ padding: \"0\", cursor: \"pointer\" }}\n          >\n            <i className=\"arrow\"></i>\n          </div>\n        </div>\n\n        <Menu\n          style={{ marginTop: \"40px\" }}\n          anchorEl={anchorEle}\n          keepMounted\n          open={Boolean(anchorEle)}\n          onClose={handleProfClose}\n        >\n          <MenuItem onClick={logout}>Logout</MenuItem>\n        </Menu>\n      </div>\n    </div>\n  );\n};\n\nexport default TopNavBar;\n","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/NavigationBar/TopNavBarHome.js",["330","331","332","333","334","335","336","337","338","339","340","341","342","343","344"],"import React, { useContext, useEffect, useState } from \"react\";\nimport AuthContext from \"../../context/AuthContext\";\nimport \"../../css/Navbar.css\";\nimport { GrAddCircle } from \"react-icons/gr\";\nimport UserAvatar from \"./UserAvatar\";\nimport { Menu, MenuItem } from \"@material-ui/core\";\nimport Search from \"../../assets/search\";\nimport messageIcon from \"../../assets/message.png\";\nimport Alert from \"../../assets/alert\";\nimport ProjectForm from \"../Forms/ProjectForm\";\nimport TaskForm from \"../Forms/AddTaskForm\";\nimport apiServer from \"../../config/apiServer\";\nimport { Context as UserContext } from \"../../context/store/UserStore\";\n\nconst TopNavBarHome = () => {\n  const { logout } = useContext(AuthContext);\n  const [userState, userdispatch] = useContext(UserContext);\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [anchorEle, setAnchorEle] = useState(null);\n  const [openProject, setOpenProject] = useState(false);\n  const [openTask, setOpenTask] = useState(false);\n  const userId = localStorage.getItem(\"userId\");\n\n  // useEffect(()=>{\n  //   (async()=>{\n  //     const user = await apiServer.get(\"/user\")\n  //   })();\n  // },[])\n\n  const clickOpenTask = () => {\n    setOpenTask(true);\n    handleNewClose();\n  };\n\n  const clickCloseTask = () => {\n    setOpenTask(false);\n  };\n\n  const clickOpenProject = () => {\n    setOpenProject(true);\n    handleNewClose();\n  };\n  const clickCloseProject = () => {\n    setOpenProject(false);\n  };\n\n  const handleNewClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleNewClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleProfClick = (event) => {\n    setAnchorEle(event.currentTarget);\n  };\n  const handleProfClose = () => {\n    setAnchorEle(null);\n  };\n  return (\n    <div className=\"top-nav-bar-container\" style={{}}>\n      <div\n        className=\"top-nav-bar-left\"\n        style={{ display: \"flex\", flexDirection: \"column\" }}\n      ></div>\n      <div className=\"top-nav-bar-middle\"></div>\n      <div className=\"top-nav-bar-right\" style={{}}>\n        {/* <div style={{ display: \"flex\" }}>\n          <input className=\"searchbar\" placeholder={\"Search\"}></input>\n        </div> */}\n        {/* <div>\n          <GrAddCircle onClick={handleNewClick} className=\"top-nav-bar--icon\" />\n          <Menu\n            style={{ marginTop: \"40px\" }}\n            anchorEl={anchorEl}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={handleNewClose}\n          >\n            <MenuItem onClick={clickOpenTask}>Add Task</MenuItem>\n            <TaskForm\n              handleNewClose={handleNewClose}\n              clickClose={clickCloseTask}\n              open={openTask}\n            ></TaskForm>\n            <MenuItem onClick={clickOpenProject}>Add Project</MenuItem>\n            <ProjectForm\n              handleNewClose={handleNewClose}\n              clickClose={clickCloseProject}\n              open={openProject}\n            />\n          </Menu>\n        </div> */}\n        <div\n          className=\"top-nav-icons\"\n          style={{ display: \"flex\", alignItems: \"center\" }}\n        >\n          <div>\n            <Alert />\n          </div>\n          <div>\n            <Search />\n          </div>\n\n          <div>\n            <img className=\"logo\" style={{}} src={messageIcon} alt=\"logo\" />\n          </div>\n        </div>\n\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n          }}\n        >\n          <div style={{ padding: \"0\" }}>\n            <UserAvatar id={localStorage.getItem(\"userId\")} />\n          </div>\n          <div>\n            <p style={{ fontWeight: 500 }}>{userState.user.name}</p>\n          </div>\n          <div\n            onClick={handleProfClick}\n            style={{ padding: \"0\", cursor: \"pointer\" }}\n          >\n            <i className=\"arrow\"></i>\n          </div>\n        </div>\n\n        <Menu\n          style={{ marginTop: \"40px\" }}\n          anchorEl={anchorEle}\n          keepMounted\n          open={Boolean(anchorEle)}\n          onClose={handleProfClose}\n        >\n          <MenuItem onClick={logout}>Logout</MenuItem>\n        </Menu>\n      </div>\n    </div>\n  );\n};\n\nexport default TopNavBarHome;\n","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/NavigationBar/TopNavBarTask.js",["345","346","347","348","349","350","351","352","353","354","355","356","357"],"import React, { useContext, useState } from \"react\";\nimport AuthContext from \"../../context/AuthContext\";\nimport { Context as UserContext } from \"../../context/store/UserStore\";\nimport { Context as TaskContext } from \"../../context/store/TaskStore\";\nimport \"../../css/Navbar.css\";\nimport { GrAddCircle } from \"react-icons/gr\";\nimport UserAvatar from \"./UserAvatar\";\nimport { Menu, MenuItem } from \"@material-ui/core\";\nimport ProjectForm from \"../Forms/ProjectForm\";\nimport TaskForm from \"../Forms/AddTaskForm\";\nimport Search from \"../../assets/search\";\nimport messageIcon from \"../../assets/message.png\";\nimport Alert from \"../../assets/alert\";\n\nconst TopNavBarTask = () => {\n  const { logout } = useContext(AuthContext);\n  const [userState, userdispatch] = useContext(UserContext);\n  const { name } = userState.user;\n  const [taskState, taskdispatch] = useContext(TaskContext);\n  const numTask = taskState.tasks.filter((task) => task.completed === true);\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [anchorEle, setAnchorEle] = useState(null);\n  const [openProject, setOpenProject] = useState(false);\n  const [openTask, setOpenTask] = useState(false);\n\n  const clickOpenTask = () => {\n    setOpenTask(true);\n    handleNewClose();\n  };\n\n  const clickCloseTask = () => {\n    setOpenTask(false);\n  };\n\n  const clickOpenProject = () => {\n    setOpenProject(true);\n    handleNewClose();\n  };\n  const clickCloseProject = () => {\n    setOpenProject(false);\n  };\n\n  const handleNewClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleNewClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleProfClick = (event) => {\n    setAnchorEle(event.currentTarget);\n  };\n  const handleProfClose = () => {\n    setAnchorEle(null);\n  };\n\n  return (\n    <div className=\"top-nav-bar-container\" style={{}}>\n      <div\n        className=\"top-nav-bar-left\"\n        style={{ display: \"flex\", flexDirection: \"column\" }}\n      >\n        <div style={{ fontSize: \"20px\" }}>{name}'s Tasks</div>\n        <p style={{}}>{numTask.length} completed tasks</p>\n      </div>\n      <div className=\"top-nav-bar-middle\"></div>\n      <div className=\"top-nav-bar-right\" style={{}}>\n        {/* <div style={{ display: \"flex\" }}>\n          <input className=\"searchbar\" placeholder={\"Search\"}></input>\n        </div> */}\n        {/* <div>\n          <GrAddCircle onClick={handleNewClick} className=\"top-nav-bar--icon\" />\n          <Menu\n            style={{ marginTop: \"40px\" }}\n            anchorEl={anchorEl}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={handleNewClose}\n          >\n            <MenuItem onClick={clickOpenTask}>Add Task</MenuItem>\n            <TaskForm\n              handleNewClose={handleNewClose}\n              clickClose={clickCloseTask}\n              open={openTask}\n            ></TaskForm>\n            <MenuItem onClick={clickOpenProject}>Add Project</MenuItem>\n            <ProjectForm\n              handleNewClose={handleNewClose}\n              clickClose={clickCloseProject}\n              open={openProject}\n            />\n            \n          </Menu>\n        </div> */}\n        <div\n          className=\"top-nav-icons\"\n          style={{ display: \"flex\", alignItems: \"center\" }}\n        >\n          <div>\n            <Alert />\n          </div>\n          <div>\n            <Search />\n          </div>\n\n          <div>\n            <img className=\"logo\" style={{}} src={messageIcon} alt=\"logo\" />\n          </div>\n        </div>\n\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n          }}\n        >\n          <div style={{ padding: \"0\" }}>\n            <UserAvatar id={localStorage.getItem(\"userId\")} />\n          </div>\n          <div>{userState.user.name}</div>\n          <div\n            onClick={handleProfClick}\n            style={{ padding: \"0\", cursor: \"pointer\" }}\n          >\n            <i className=\"arrow\"></i>\n          </div>\n        </div>\n\n        <Menu\n          style={{ marginTop: \"40px\" }}\n          anchorEl={anchorEle}\n          keepMounted\n          open={Boolean(anchorEle)}\n          onClose={handleProfClose}\n        >\n          <MenuItem onClick={logout}>Logout</MenuItem>\n        </Menu>\n      </div>\n    </div>\n  );\n};\n\nexport default TopNavBarTask;\n","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/config/index.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/projects/NewProjectTile.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/tasks/PopOutTask.js",["358","359","360","361","362","363","364","365"],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/projects/ProjectItemHome.js",["366","367"],"import React, { useState } from \"react\";\r\nimport \"../../css/Project.css\";\r\nimport { AiOutlineEllipsis } from \"react-icons/ai\";\r\nimport { Menu, MenuItem } from \"@material-ui/core\";\r\n\r\nconst ProjectItemHome = ({ project }) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const openModal = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleMenuClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  //import component as body such as forms, details, etc\r\n  // const body = (\r\n  //   <div className=\"modal-container\">\r\n  //     {/* <h2 id=\"modal-title\">Task Detail</h2>\r\n  //     <p id=\"modal-description\">\r\n  //       Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\r\n  //     </p> */}\r\n  //     <TaskDetailsForm task={task} closeModal={closeModal} />\r\n  //   </div>\r\n  // );\r\n\r\n  return (\r\n    <div className=\"project-home-item\" onClick={openModal}>\r\n      <div className=\"project-home-item-inner-container\">\r\n        <div className=\"project-home-item-inner-left\">\r\n          <div className=\"project-home-item-icon-container\">\r\n            <span className={`dot-task-${project.id}`}></span>\r\n          </div>\r\n          <div className=\"project-home-item-name-container\">\r\n            <p style={{ fontSize: \"15px\", fontWeight: \"500\", margin: \"0px\" }}>\r\n              {project.name}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div\r\n          className=\"project-home-item-more-menu\"\r\n          style={{ height: \"100%\" }}\r\n          onClick={handleMenuClick}\r\n        >\r\n          <AiOutlineEllipsis style={{ fontSize: \"24px\" }} />\r\n        </div>\r\n        <Menu\r\n          style={{}}\r\n          anchorEl={anchorEl}\r\n          keepMounted\r\n          open={Boolean(anchorEl)}\r\n          onClose={handleMenuClose}\r\n        >\r\n          <MenuItem onClick={handleMenuClose}>Delete</MenuItem>\r\n        </Menu>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectItemHome;\r\n","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/projects/ProjectTile.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/tasks/TaskDetailsForm.js",["368"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport \"../../css/Task.css\";\nimport moment from \"moment\";\nimport UserAvatar from \"../NavigationBar/UserAvatar\";\nimport apiServer from \"../../config/apiServer\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { Context as TaskContext } from \"../../context/store/TaskStore\";\nconst TaskDetailsForm = ({\n  task,\n  closeModal,\n  open,\n  setTasks,\n  setTasklistTasks,\n}) => {\n  const { register, handleSubmit } = useForm();\n  const [taskState, taskdispatch] = useContext(TaskContext);\n  const createdDate = moment(\n    task.createdAt.substring(0, 10).replace(\"-\", \"\"),\n    \"YYYYMMDD\"\n  );\n  const updatedDate = moment(\n    task.updatedAt.substring(0, 10).replace(\"-\", \"\"),\n    \"YYYYMMDD\"\n  );\n\n  const date = moment(\n    task.due_date.substring(0, 10).replace(\"-\", \"\"),\n    \"YYYYMMDD\"\n  );\n  const dueDate = date.format(\"YYYY-MM-DD\");\n\n  const [user, setUser] = useState();\n  const [loading, setLoading] = useState(true);\n  // console.log(task.completed);\n  const getTaskUser = async () => {\n    const res = await apiServer.get(`/user/${task.assignee_id}`);\n    setUser(res.data);\n    setLoading(false);\n  };\n\n  const onSubmit = async ({ name, due_date, description, completed }) => {\n    // put route to update task\n    try {\n      await apiServer.put(`/task/${task.id}`, {\n        name,\n        due_date,\n        description,\n        completed,\n      });\n      //Updates new task list\n      const res = await apiServer.get(\n        `/task/user/${localStorage.getItem(\"userId\")}`\n      );\n      await taskdispatch({ type: \"update_task\", payload: res.data });\n      if (setTasklistTasks) {\n        const taskres = await apiServer.get(\n          `/tasklist/${task.tasklist_id}/tasks`\n        );\n        setTasklistTasks(taskres.data);\n      }\n      closeModal();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const handleDelete = async () => {\n    try {\n      await apiServer.delete(`/task/${task.id}`);\n      //Updates new task list\n      const res = await apiServer.get(\n        `/task/user/${localStorage.getItem(\"userId\")}`\n      );\n      await taskdispatch({ type: \"update_task\", payload: res.data });\n      closeModal();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    getTaskUser();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (loading) {\n    return <div></div>;\n  }\n  return (\n    <div>\n      <form className=\"task-details-form\" onSubmit={handleSubmit(onSubmit)}>\n        <div>\n          <textarea\n            name=\"name\"\n            type=\"text\"\n            placeholder={\"Task Name\"}\n            defaultValue={task.name}\n            ref={register}\n            className=\"edit-task-title textarea\"\n          ></textarea>\n        </div>\n        <div className=\"edit-task-info\">\n          <div\n            className=\"edit-task-info-left\"\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n            }}\n          >\n            <div className=\"edit-task-user-avatar-container\">\n              <UserAvatar id={task.assignee_id} />\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                paddingLeft: \"10px\",\n              }}\n            >\n              <div style={{ fontWeight: \"500\" }}>Assignee</div>\n              <select\n                style={{ marginTop: \"10px\", border: \"none\" }}\n                name=\"assignee\"\n                defaultValue={user.name}\n              >\n                <option value={user.name}>{user.name}</option>\n              </select>\n              {/* <div>{user.name}</div> */}\n            </div>\n          </div>\n          <div className=\"edit-task-info-mid\">\n            <input\n              type=\"checkbox\"\n              name=\"completed\"\n              defaultChecked={task.completed}\n              ref={register}\n            ></input>\n            <label htmlFor=\"completed\" style={{ fontWeight: \"500\" }}>\n              Mark Complete\n            </label>\n          </div>\n          <div\n            className=\"edit-task-info-right\"\n            style={{ display: \"flex\", flexDirection: \"column\" }}\n          >\n            <div style={{ display: \"flex\" }}>\n              <div style={{ fontWeight: \"500\", marginRight: \"5px\" }}>\n                Created:{\" \"}\n              </div>\n              <div>{createdDate.format(\"MMM DD YYYY\")}</div>\n            </div>\n            <div style={{ display: \"flex\", marginTop: \"5px\" }}>\n              <div style={{ fontWeight: \"500\", marginRight: \"5px\" }}>\n                Last Updated:{\" \"}\n              </div>\n              <div>{updatedDate.format(\"MMM DD YYYY\")}</div>\n            </div>\n            <div style={{ marginTop: \"5px\", display: \"flex\" }}>\n              <div\n                style={{\n                  fontWeight: \"500\",\n                  marginRight: \"5px\",\n                  alignSelf: \"center\",\n                }}\n              >\n                Due:\n              </div>\n              <input\n                className=\"edit-task-form-input\"\n                style={{ border: \"1px solid black\" }}\n                type=\"date\"\n                name=\"due_date\"\n                defaultValue={dueDate}\n                ref={register}\n              ></input>\n            </div>\n          </div>\n        </div>\n        <div>\n          <textarea\n            name=\"description\"\n            type=\"text\"\n            placeholder={\"Task Description\"}\n            defaultValue={task.description}\n            ref={register}\n            className=\"edit-task-description textarea\"\n          ></textarea>\n        </div>\n        <div style={{ display: \"flex\" }}>\n          <div>\n            <Button\n              style={{ color: \"red\" }}\n              onClick={handleDelete}\n              color=\"primary\"\n            >\n              Delete\n            </Button>\n          </div>\n          <div style={{ display: \"flex\", marginLeft: \"350px\" }}>\n            <Button\n              style={{ color: \"#0093ff\" }}\n              onClick={closeModal}\n              color=\"primary\"\n            >\n              Cancel\n            </Button>\n            <Button style={{ color: \"#0093ff\" }} type=\"submit\" color=\"primary\">\n              Save\n            </Button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default TaskDetailsForm;\n","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/tasks/TaskItemHome.js",["369","370"],"import React, { useState } from \"react\";\nimport moment from \"moment\";\nimport { Modal } from \"@material-ui/core\";\nimport \"../../css/Modal.css\";\nimport TaskDetailsForm from \"./TaskDetailsForm\";\nimport {\n  RiCheckboxBlankCircleLine,\n  RiCheckboxCircleLine,\n} from \"react-icons/ri\";\nimport { AiOutlineEllipsis } from \"react-icons/ai\";\nimport { Menu, MenuItem } from \"@material-ui/core\";\n//Task item list for home and task page\n\nconst TaskItemHome = ({ task }) => {\n  const date = moment(\n    task.due_date.substring(0, 10).replace(\"-\", \"\"),\n    \"YYYYMMDD\"\n  );\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [open, setOpen] = useState(false);\n  const openModal = () => {\n    setOpen(true);\n  };\n\n  const closeModal = () => {\n    setOpen(false);\n  };\n\n  const handleMenuClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n  };\n\n  //import component as body such as forms, details, etc\n  const body = (\n    <div className=\"modal-container\">\n      {/* <h2 id=\"modal-title\">Task Detail</h2>\n      <p id=\"modal-description\">\n        Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\n      </p> */}\n      <TaskDetailsForm task={task} closeModal={closeModal} />\n    </div>\n  );\n  return (\n    <>\n      <div className=\"task-home-item\">\n        <div className=\"task-home-item-inner-container\">\n          <div className=\"task-home-item-inner-left\" onClick={openModal}>\n            <div className=\"task-home-item-icon-container\">\n              {/* {task.completed ? (\n                <RiCheckboxCircleLine\n                  style={{ color: \"green\", fontSize: \"16px\" }}\n                />\n              ) : (\n                <RiCheckboxBlankCircleLine style={{ fontSize: \"16px\" }} />\n              )} */}\n              <span className={`dot-task-${task.id}`}></span>\n            </div>\n            <div className=\"task-home-item-name-container\">\n              <p\n                style={{\n                  fontSize: \"15px\",\n                  fontWeight: \"500\",\n                  margin: \"0px\",\n                }}\n              >\n                {task.name}\n              </p>\n              <p style={{ color: \"grey\", margin: \"0\" }}>\n                {date.format(\"MMM D\")}\n              </p>\n            </div>\n          </div>\n          <div\n            className=\"task-home-item-more-menu\"\n            style={{ height: \"100%\" }}\n            onClick={handleMenuClick}\n          >\n            <AiOutlineEllipsis style={{ fontSize: \"24px\" }} />\n          </div>\n          <Menu\n            style={{}}\n            anchorEl={anchorEl}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={handleMenuClose}\n          >\n            <MenuItem onClick={handleMenuClose}>Delete</MenuItem>\n          </Menu>\n        </div>\n      </div>\n      <Modal open={open} onClose={closeModal}>\n        {body}\n      </Modal>\n      {/* <TaskDetailsForm task={task} closeModal={closeModal} open={open} /> */}\n    </>\n  );\n};\n\nexport default TaskItemHome;\n","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/tasks/TaskItemTask.js",["371","372"],"import React, { useState, useContext } from \"react\";\r\nimport moment from \"moment\";\r\nimport { Modal } from \"@material-ui/core\";\r\nimport \"../../css/Modal.css\";\r\nimport TaskDetailsForm from \"../tasks/TaskDetailsForm\";\r\nimport {\r\n  RiCheckboxBlankCircleLine,\r\n  RiCheckboxCircleLine,\r\n} from \"react-icons/ri\";\r\nimport { Context as TaskContext } from \"../../context/store/TaskStore\";\r\nimport apiServer from \"../../config/apiServer\";\r\n\r\n//Task item list for home and task page\r\n\r\nconst TaskItemTask = ({ task, showSideMenu, sideMenu, setInitialLoad }) => {\r\n  const [taskState, taskDispatch] = useContext(TaskContext);\r\n\r\n  const date = moment(\r\n    task.due_date.substring(0, 10).replace(\"-\", \"\"),\r\n    \"YYYYMMDD\"\r\n  );\r\n  const [open, setOpen] = useState(false);\r\n  const openModal = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const setTaskPopOut = async () => {\r\n    if (sideMenu === false) {\r\n      showSideMenu();\r\n    } else {\r\n      taskDispatch({ type: \"get_selected_task\", payload: null });\r\n      const res = await apiServer.get(`/task/${task.id}`);\r\n      await taskDispatch({ type: \"get_selected_task\", payload: res.data });\r\n      setInitialLoad(false);\r\n    }\r\n  };\r\n\r\n  //import component as body such as forms, details, etc\r\n  const body = (\r\n    <div className=\"modal-container\">\r\n      {/* <h2 id=\"modal-title\">Task Detail</h2>\r\n      <p id=\"modal-description\">\r\n        Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\r\n      </p> */}\r\n      <TaskDetailsForm task={task} closeModal={closeModal} />\r\n    </div>\r\n  );\r\n  return (\r\n    <>\r\n      <li className=\"task-task-item\" onClick={setTaskPopOut}>\r\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n          {task.completed ? (\r\n            <RiCheckboxCircleLine\r\n              style={{ color: \"green\", fontSize: \"16px\" }}\r\n            />\r\n          ) : (\r\n            <RiCheckboxBlankCircleLine style={{ fontSize: \"16px\" }} />\r\n          )}\r\n          <p style={{ paddingLeft: \"5px\", color: \"gray\" }}>{task.name}</p>\r\n        </div>\r\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n          <div\r\n            className={`task-project-name-container task-project-${task.Project.id}`}\r\n          >\r\n            <p\r\n              style={{\r\n                margin: \"0px\",\r\n                padding: \"5px\",\r\n                fontSize: \"12px\",\r\n                fontWeight: \"500\",\r\n              }}\r\n            >\r\n              {task.Project.name}\r\n            </p>\r\n          </div>\r\n          <div>\r\n            <p style={{ color: \"gray\" }}>{date.format(\"MMM D YYYY\")}</p>\r\n          </div>\r\n        </div>\r\n      </li>\r\n      <Modal open={open} onClose={closeModal}>\r\n        {body}\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskItemTask;\r\n","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Forms/AddTaskForm.js",["373","374","375","376","377"],"import React, { useState, useContext } from \"react\";\nimport \"../../css/Task.css\";\nimport Button from \"@material-ui/core/Button\";\nimport { Modal } from \"@material-ui/core\";\nimport { useForm } from \"react-hook-form\";\nimport apiServer from \"../../config/apiServer\";\nimport { Context as ProjectContext } from \"../../context/store/ProjectStore\";\nimport { Context as TasklistContext } from \"../../context/store/TasklistStore\";\nimport { Context as TaskContext } from \"../../context/store/TaskStore\";\n\nconst TaskForm = ({ handleNewClose, clickClose, open, setTasklists }) => {\n  const { register, handleSubmit, errors, clearErrors } = useForm();\n  const [projectError, setProjectError] = useState();\n  const [assigneeError, setAssigneeError] = useState();\n  const [projectState, projectdispatch] = useContext(ProjectContext);\n  const [taskState, taskdispatch] = useContext(TaskContext);\n  const [projectUsers, setProjectUsers] = useState([\n    {\n      id: \"0\",\n      name: \"Choose a Project First\",\n    },\n  ]);\n  const [projectTaskLists, setProjectTaskLists] = useState([\n    {\n      id: \"0\",\n      name: \"Choose a Project First\",\n    },\n  ]);\n\n  // const getUserProjects = async () => {\n  //   const userId = localStorage.getItem(\"userId\");\n  //   const res = await apiServer.get(`/project/user/${userId}`);\n  //   setProjects(res.data);\n  //   setLoading(false);\n  // };\n\n  const getProjectUsers = async (event) => {\n    var projectSelect = document.getElementById(\"project-select\");\n    var assigneeSelect = document.getElementById(\"assignee-select\");\n    var tasklistSelect = document.getElementById(\"tasklist-select\");\n    clearErrors(projectSelect.name);\n    clearErrors(assigneeSelect.name);\n    clearErrors(tasklistSelect.name);\n    const res = await apiServer.get(`/project/${projectSelect.value}/team`);\n    setProjectUsers(res.data.Users);\n    getProjectTasklists();\n  };\n\n  const getProjectTasklists = async (event) => {\n    const select = document.getElementById(\"project-select\");\n    const res = await apiServer.get(`/project/${select.value}/tasklists`);\n    setProjectTaskLists(res.data);\n  };\n\n  // useEffect(() => {\n  //   getUserProjects();\n  // }, []);\n  //Probably need dispatch here to update the task page when task is created.\n  const onSubmit = async ({\n    name,\n    projectId,\n    assigneeId,\n    due_date,\n    tasklistId,\n    completed,\n    description,\n  }) => {\n    await apiServer.post(`/tasklist/${tasklistId}/task`, {\n      name,\n      projectId,\n      assigneeId,\n      due_date,\n      completed,\n      description,\n    });\n\n    // console.log(name);\n    // console.log(projectId);\n    // console.log(assigneeId);\n    // console.log(due_date);\n    // console.log(completed);\n    // console.log(description);\n    // const res = await apiServer.get(\n    //   `/project/user/${localStorage.getItem(\"userId\")}`\n    // );\n\n    const userId = localStorage.getItem(\"userId\");\n    const res = await apiServer.get(`/task/user/${userId}`);\n    await taskdispatch({ type: \"get_user_tasks\", payload: res.data });\n\n    if (setTasklists) {\n      const taskResponse = await apiServer.get(\n        `/project/${projectId}/tasklists`\n      );\n\n      setTasklists(taskResponse.data);\n    }\n\n    clickClose();\n  };\n\n  const renderedProjects = projectState.projects.map((project, i) => {\n    return (\n      <option key={i} id={project.id} value={project.id}>\n        {project.name}\n      </option>\n    );\n  });\n\n  const renderedUsers = projectUsers.map((user, i) => {\n    return (\n      <option key={i} value={user.id}>\n        {user.name}\n      </option>\n    );\n  });\n\n  const renderedTasklists = projectTaskLists.map((tasklist, i) => {\n    return (\n      <option key={i} value={tasklist.id}>\n        {tasklist.name}\n      </option>\n    );\n  });\n\n  return (\n    <div>\n      <Modal open={open} onClose={clickClose}>\n        <div className=\"modal-container\">\n          <form className=\"task-form\" onSubmit={handleSubmit(onSubmit)}>\n            <h2 className=\"form-header\">Add a Task</h2>\n            <div className=\"form-top-container\">\n              <div className=\"form-top-left\">\n                <label className=\"form-label\">\n                  Task Name\n                  <input\n                    name=\"name\"\n                    type=\"text\"\n                    placeholder={\"Task Name\"}\n                    className=\"form-input\"\n                    ref={register({ required: true })}\n                  ></input>\n                  {errors.name?.type === \"required\" && (\n                    <p className=\"error-message\">Please enter a task name</p>\n                  )}\n                </label>\n                <label className=\"form-label\">\n                  Project\n                  <select\n                    id=\"project-select\"\n                    name=\"projectId\"\n                    className=\"form-input\"\n                    onChange={getProjectUsers}\n                    ref={register({ required: true })}\n                  >\n                    <option value={0}>{\"<---Choose Project--->\"}</option>\n                    {renderedProjects}\n                  </select>\n                  <p className=\"error-message\">{projectError}</p>\n                  {errors.projectId?.type === \"required\" && (\n                    <p className=\"error-message\">Please choose a project</p>\n                  )}\n                </label>\n              </div>\n              <div className=\"form-top-middle\">\n                <label className=\"form-label\">\n                  Assignee\n                  <select\n                    id=\"assignee-select\"\n                    name=\"assigneeId\"\n                    className=\"form-input\"\n                    ref={register({ required: true })}\n                  >\n                    {renderedUsers}\n                  </select>\n                  <p className=\"error-message\">{assigneeError}</p>\n                  {errors.assigneeId?.type === \"required\" && (\n                    <p className=\"error-message\">Please choose an assignee</p>\n                  )}\n                </label>\n                <label className=\"form-label\">\n                  Due date\n                  <input\n                    className=\"form-input\"\n                    type=\"date\"\n                    name=\"due_date\"\n                    ref={register({ required: true })}\n                  ></input>\n                  {errors.due_date?.type === \"required\" && (\n                    <p className=\"error-message\">Please choose a Due Date</p>\n                  )}\n                </label>\n              </div>\n              <div className=\"form-top-right\">\n                <label className=\"form-label\" style={{ paddingBottom: \"10px\" }}>\n                  Tasklist\n                  <select\n                    id=\"tasklist-select\"\n                    name=\"tasklistId\"\n                    className=\"form-input\"\n                    ref={register({\n                      required: true,\n                    })}\n                  >\n                    {/* <option value={0}>Choose a project first</option> */}\n                    {renderedTasklists}\n                  </select>\n                  {/* <p className=\"error-message\">{taskListError}</p> */}\n                  {errors.tasklistId?.type === \"required\" && (\n                    <p className=\"error-message\">\n                      Please choose a tasklist. You may need to make a tasklist\n                      first before adding a task.\n                    </p>\n                  )}\n                </label>\n                <label\n                  className=\"form-label\"\n                  style={{ padding: \"10px 5px 10px 0px\" }}\n                >\n                  Mark Complete\n                  <input\n                    style={{ margin: \"10px 0\" }}\n                    type=\"checkbox\"\n                    name=\"completed\"\n                    defaultChecked={false}\n                    ref={register}\n                  ></input>\n                </label>\n              </div>\n            </div>\n            <div>\n              <textarea\n                name=\"description\"\n                type=\"text\"\n                placeholder={\"Task Description\"}\n                className=\"edit-task-description textarea\"\n                ref={register}\n              ></textarea>\n            </div>\n\n            <div style={{ display: \"flex\", marginLeft: \"500px\" }}>\n              <Button\n                style={{ color: \"#0093ff\" }}\n                onClick={clickClose}\n                color=\"primary\"\n              >\n                Cancel\n              </Button>\n              <Button\n                style={{ color: \"#0093ff\" }}\n                type=\"submit\"\n                color=\"primary\"\n              >\n                Add\n              </Button>\n            </div>\n          </form>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default TaskForm;\n","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/tasks/TaskSection.js",["378"],"import React, { useContext, useState } from \"react\";\r\nimport { BiRightArrow } from \"react-icons/bi\";\r\nimport { Context as TaskContext } from \"../../context/store/TaskStore\";\r\nimport \"../../css/Task.css\";\r\nimport TaskItemTask from \"./TaskItemTask\";\r\nconst TaskSection = ({ title, tasks }) => {\r\n  const [open, setOpen] = useState(true);\r\n  const [taskState] = useContext(TaskContext);\r\n\r\n  const toggle = () => {\r\n    setOpen(!open);\r\n    let arrow = document.getElementById(`task-collapse-${title}`);\r\n    arrow.classList.toggle(\"open-arrow-collapse\");\r\n    arrow.classList.toggle(\"open-arrow\");\r\n  };\r\n  const taskList = tasks.map((task, i) => {\r\n    return <TaskItemTask task={task} key={i} />;\r\n  });\r\n  return (\r\n    <div className=\"task-section\">\r\n      <div className=\"task-section-header\" onClick={toggle}>\r\n        <div id={`task-collapse-${title}`} className=\"open-arrow\">\r\n          <BiRightArrow />\r\n        </div>\r\n        <h3 className=\"task-section-title\">{title}</h3>\r\n      </div>\r\n      {open && <div className=\"task-section-list\"> {taskList}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskSection;\r\n","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/tasks/TaskListItem.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/teams/NewTeamMemberIcon.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Forms/AddTaskProjectForm.js",["379"],"import React, { useEffect, useState } from \"react\";\r\nimport \"../../css/Task.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Modal } from \"@material-ui/core\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport apiServer from \"../../config/apiServer\";\r\nimport Loader from \"../Loader\";\r\n\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst AddTaskProjectForm = ({\r\n  tasklistId,\r\n  projectId,\r\n  clickClose,\r\n  open,\r\n  setTasklistTasks,\r\n  setTasklists,\r\n}) => {\r\n  const { register, handleSubmit, errors } = useForm();\r\n\r\n  const { teamId } = useParams();\r\n  const [projectUsers, setProjectUsers] = useState();\r\n\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const getProjectUsers = async (event) => {\r\n    const res = await apiServer.get(`/team/${teamId}/users`);\r\n    setProjectUsers(res.data[0].Users);\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getProjectUsers();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  //Probably need dispatch here to update the task page when task is created.\r\n\r\n  const onSubmit = async ({\r\n    name,\r\n    assigneeId,\r\n    due_date,\r\n    completed,\r\n    description,\r\n  }) => {\r\n    await apiServer.post(`/tasklist/${tasklistId}/task`, {\r\n      name,\r\n      projectId,\r\n      assigneeId,\r\n      due_date,\r\n      completed,\r\n      description,\r\n    });\r\n    const res = await apiServer.get(`/tasklist/${tasklistId}/tasks`);\r\n\r\n    // const res = await apiServer.get(`/project/${projectId}/tasklists`);\r\n    const taskResponse = await apiServer.get(`/project/${projectId}/tasks`);\r\n    // setTasks(taskResponse.data);\r\n    setTasklistTasks(res.data);\r\n    const resp = await apiServer.get(`/project/${projectId}/tasklists`);\r\n    setTasklists(resp.data);\r\n    clickClose();\r\n  };\r\n\r\n  if (loading) {\r\n    return <Loader />;\r\n  }\r\n\r\n  const renderedUsers = projectUsers.map((user, i) => {\r\n    return (\r\n      <option key={i} value={user.id}>\r\n        {user.name}\r\n      </option>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Modal open={open} onClose={clickClose}>\r\n        <div className=\"modal-container\">\r\n          <form className=\"task-form\" onSubmit={handleSubmit(onSubmit)}>\r\n            <h2 className=\"form-header\">Add a Task</h2>\r\n            <div className=\"form-top-container\">\r\n              <div className=\"form-top-left\">\r\n                <label className=\"form-label\">\r\n                  Task Name\r\n                  <input\r\n                    name=\"name\"\r\n                    type=\"text\"\r\n                    placeholder={\"Task Name\"}\r\n                    className=\"form-input\"\r\n                    ref={register({ required: true })}\r\n                  ></input>\r\n                  {errors.name?.type === \"required\" && (\r\n                    <p className=\"error-message\">Please enter a task name</p>\r\n                  )}\r\n                </label>\r\n                <label className=\"form-label\">\r\n                  Assignee\r\n                  <select\r\n                    id=\"assignee-select\"\r\n                    name=\"assigneeId\"\r\n                    className=\"form-input\"\r\n                    ref={register({ required: true })}\r\n                  >\r\n                    {renderedUsers}\r\n                  </select>\r\n                  {errors.assigneeId?.type === \"required\" && (\r\n                    <p className=\"error-message\">Please choose an assignee</p>\r\n                  )}\r\n                </label>\r\n              </div>\r\n              <div className=\"form-top-middle\">\r\n                <label className=\"form-label\">\r\n                  Due date\r\n                  <input\r\n                    className=\"form-input\"\r\n                    type=\"date\"\r\n                    name=\"due_date\"\r\n                    ref={register({ required: true })}\r\n                  ></input>\r\n                  {errors.due_date?.type === \"required\" && (\r\n                    <p className=\"error-message\">Please choose a due_date</p>\r\n                  )}\r\n                </label>\r\n                <label\r\n                  className=\"form-label\"\r\n                  style={{ padding: \"10px 5px 10px 0px\" }}\r\n                >\r\n                  Mark Complete\r\n                  <input\r\n                    style={{ margin: \"10px 0\" }}\r\n                    type=\"checkbox\"\r\n                    name=\"completed\"\r\n                    //here\r\n                    defaultChecked={false}\r\n                    ref={register}\r\n                  ></input>\r\n                </label>\r\n              </div>\r\n              <div className=\"form-top-right\"></div>\r\n            </div>\r\n            <div>\r\n              <textarea\r\n                name=\"description\"\r\n                type=\"text\"\r\n                placeholder={\"Task Description\"}\r\n                className=\"edit-task-description textarea\"\r\n                ref={register}\r\n              ></textarea>\r\n            </div>\r\n\r\n            <div style={{ display: \"flex\", marginLeft: \"500px\" }}>\r\n              <Button\r\n                style={{ color: \"#0093ff\" }}\r\n                onClick={clickClose}\r\n                color=\"primary\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                style={{ color: \"#0093ff\" }}\r\n                type=\"submit\"\r\n                color=\"primary\"\r\n              >\r\n                Add\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTaskProjectForm;\r\n","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/teams/TeamMemberIcon.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Forms/TeamForm.js",["380"],"import React, { useContext } from \"react\";\nimport { Modal } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport { useForm } from \"react-hook-form\";\nimport apiServer from \"../../config/apiServer\";\nimport { Context as TeamContext } from \"../../context/store/TeamStore\";\nimport \"../../css/Forms.css\";\nconst TeamForm = ({ handleNewClose, clickClose, open }) => {\n  const { register, handleSubmit, errors } = useForm();\n  const [teamState, teamdispatch] = useContext(TeamContext);\n  const userId = localStorage.getItem(\"userId\");\n\n  const onSubmit = async ({ name, description }) => {\n    await apiServer.post(`/team/user/${userId}`, {\n      name,\n      description,\n    });\n\n    const res = await apiServer.get(`/team/user/${userId}`);\n    await teamdispatch({ type: \"update_user_teams\", payload: res.data });\n    clickClose();\n  };\n\n  return (\n    <div>\n      <Modal open={open} onClose={clickClose}>\n        <div className=\"modal-container\">\n          <form className=\"task-form\" onSubmit={handleSubmit(onSubmit)}>\n            <h2 className=\"form-header\">Create a Team</h2>\n            <div className=\"form-top-container\">\n              <div className=\"form-top-left\">\n                <label className=\"form-label\">\n                  Team Name\n                  <input\n                    name=\"name\"\n                    type=\"text\"\n                    placeholder={\"Team Name\"}\n                    className=\"form-input\"\n                    ref={register({ required: true })}\n                  ></input>\n                  {errors.name?.type === \"required\" && (\n                    <p className=\"error-message\">Please enter a team name</p>\n                  )}\n                </label>\n              </div>\n              <div className=\"form-top-middle\"></div>\n              {/* <div\n                className=\"form-top-right\"\n                style={{ alignSelf: \"normal\" }}\n              ></div> */}\n            </div>\n            <div>\n              <textarea\n                name=\"description\"\n                type=\"text\"\n                placeholder={\"Team Description\"}\n                className=\"edit-task-description textarea\"\n                ref={register}\n              ></textarea>\n            </div>\n            <div style={{ display: \"flex\", marginLeft: \"400px\" }}>\n              <Button\n                style={{ color: \"#0093ff\" }}\n                onClick={clickClose}\n                color=\"primary\"\n              >\n                Cancel\n              </Button>\n              <Button\n                style={{ color: \"#0093ff\" }}\n                type=\"submit\"\n                color=\"primary\"\n              >\n                Add\n              </Button>\n            </div>\n          </form>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default TeamForm;\n","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Forms/TaskListForm.js",["381","382"],"import React, { useContext } from \"react\";\nimport \"../../css/Task.css\";\nimport Button from \"@material-ui/core/Button\";\nimport { Modal } from \"@material-ui/core\";\nimport { useForm } from \"react-hook-form\";\nimport apiServer from \"../../config/apiServer\";\nimport { Context as TasklistContext } from \"../../context/store/TasklistStore\";\nconst TaskListForm = ({ projectId, clickClose, open, setTasklists }) => {\n  const { register, handleSubmit, errors } = useForm();\n\n  const onSubmit = async ({ name }) => {\n    const userId = localStorage.getItem(\"userId\");\n    await apiServer.post(`/project/${projectId}/tasklist`, { name, userId });\n\n    const res = await apiServer.get(`/project/${projectId}/tasklists`);\n    setTasklists(res.data);\n    // tasklistdispatch({ type: \"update_project_tasklists\", payload: res.data });\n    clickClose();\n  };\n  return (\n    <div>\n      <Modal open={open} onClose={clickClose}>\n        <div\n          className=\"tasklist-modal-container\"\n          style={{ minWidth: \"auto\", width: \"200px\" }}\n        >\n          <form\n            className=\"task-form\"\n            style={{}}\n            onSubmit={handleSubmit(onSubmit)}\n          >\n            <h2 className=\"form-header\">Add a Tasklist</h2>\n            <div className=\"form-top-container\">\n              <div className=\"form-top-left\">\n                <label className=\"form-label\">\n                  Tasklist Name\n                  <input\n                    name=\"name\"\n                    type=\"text\"\n                    placeholder={\"Task Name\"}\n                    className=\"form-input\"\n                    ref={register({ required: true })}\n                  ></input>\n                  {errors.name?.type === \"required\" && (\n                    <p className=\"error-message\">Please enter a task name</p>\n                  )}\n                </label>\n              </div>\n              <div className=\"form-top-middle\"></div>\n              <div className=\"form-top-right\"></div>\n            </div>\n\n            <div style={{ display: \"flex\", marginLeft: \"100px\" }}>\n              <Button\n                style={{ color: \"#0093ff\" }}\n                onClick={clickClose}\n                color=\"primary\"\n              >\n                Cancel\n              </Button>\n              <Button\n                style={{ color: \"#0093ff\" }}\n                type=\"submit\"\n                color=\"primary\"\n              >\n                Add\n              </Button>\n            </div>\n          </form>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default TaskListForm;\n","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Forms/LoginForm.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/assets/Home.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/assets/Logo.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/assets/project.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/assets/Add.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/assets/tasks.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/assets/alert.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/assets/search.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Forms/ProjectForm.js",["383"],"import React, { useContext } from \"react\";\nimport { Modal } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport { useForm } from \"react-hook-form\";\nimport apiServer from \"../../config/apiServer\";\nimport { Context as TeamContext } from \"../../context/store/TeamStore\";\nimport { Context as ProjectContext } from \"../../context/store/ProjectStore\";\nimport \"../../css/Forms.css\";\nconst ProjectForm = ({ handleNewClose, clickClose, open, setTeamProjects }) => {\n  const { register, handleSubmit, errors, clearErrors } = useForm();\n  const [teamState, teamdispatch] = useContext(TeamContext);\n  const [projectState, projectdispatch] = useContext(ProjectContext);\n  const userId = localStorage.getItem(\"userId\");\n\n  const onSubmit = async ({ name, teamId }) => {\n    await apiServer.post(`/team/${teamId}/project/`, {\n      name,\n      userId,\n    });\n\n    //REFER TO THIS WHEN CHECKING FOR RERENDERING\n    const res = await apiServer.get(`/project/user/${userId}`);\n    await projectdispatch({ type: \"get_user_projects\", payload: res.data });\n    const projectResponse = await apiServer.get(`/team/${teamId}`);\n    // NOTE: One way this could work is if we recreate form for just team page add project form button\n    // Will not work with top nav bar form\n    // setTeamProjects(projectResponse.data.Projects);\n    await teamdispatch({\n      type: `get_team_projects${teamId}`,\n      payload: projectResponse.data,\n    });\n    if (setTeamProjects) {\n      const teamResponse = await apiServer.get(`/team/${teamId}`);\n      setTeamProjects(teamResponse.data.Projects);\n    }\n    // window.location.reload();\n\n    clickClose();\n  };\n\n  const clearError = () => {\n    var teamSelect = document.getElementById(\"team-select\");\n    clearErrors(teamSelect.name);\n  };\n  const renderedTeams = teamState.teams.map((team, i) => {\n    return (\n      <option key={i} id={team.id} value={team.id}>\n        {team.name}\n      </option>\n    );\n  });\n\n  return (\n    <div>\n      <Modal open={open} onClose={clickClose}>\n        <div className=\"modal-container\">\n          <form className=\"task-form\" onSubmit={handleSubmit(onSubmit)}>\n            <h2 className=\"form-header\">Add a Project</h2>\n            <div className=\"form-top-container\">\n              <div className=\"form-top-left\">\n                <label className=\"form-label\">\n                  Project Name\n                  <input\n                    name=\"name\"\n                    type=\"text\"\n                    placeholder={\"Project Name\"}\n                    className=\"form-input\"\n                    onChange={clearError}\n                    ref={register({ required: true })}\n                  ></input>\n                  {errors.name?.type === \"required\" && (\n                    <p className=\"error-message\">\n                      Please fill out project name\n                    </p>\n                  )}\n                </label>\n              </div>\n              <div className=\"form-top-middle\">\n                <label className=\"form-label\" style={{ width: \"200px\" }}>\n                  Team\n                  <select\n                    id=\"team-select\"\n                    name=\"teamId\"\n                    className=\"form-input\"\n                    ref={register({ required: true })}\n                  >\n                    {renderedTeams}\n                  </select>\n                  {errors.teamId?.type === \"required\" && (\n                    <p className=\"error-message\">Please choose a team</p>\n                  )}\n                </label>\n              </div>\n            </div>\n\n            <div style={{ display: \"flex\", marginLeft: \"400px\" }}>\n              <Button\n                style={{ color: \"#0093ff\" }}\n                onClick={clickClose}\n                color=\"primary\"\n              >\n                Cancel\n              </Button>\n              <Button\n                style={{ color: \"#0093ff\" }}\n                type=\"submit\"\n                color=\"primary\"\n              >\n                Add\n              </Button>\n            </div>\n          </form>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default ProjectForm;\n","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/NavigationBar/UserAvatar.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/tasks/TaskItemProject.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/Forms/AddMemberForm.js",[],"/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/tasks/ColumnTasklist.js",["384","385","386","387","388"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { Modal, responsiveFontSizes } from \"@material-ui/core\";\r\nimport AddTaskProjectForm from \"../Forms/AddTaskProjectForm\";\r\nimport ColumnTaskItem from \"./ColumnTaskItem\";\r\n\r\nconst ColumnTasklist = ({ tasklist, index, setTasklists }) => {\r\n  const [openTaskProjectForm, setOpenTaskProjectForm] = useState(false);\r\n  const [tasklistTasks, setTasklistTasks] = useState();\r\n\r\n  const openTaskProjectFormModal = () => {\r\n    setOpenTaskProjectForm(true);\r\n  };\r\n\r\n  const closeTaskProjectFormModal = () => {\r\n    setOpenTaskProjectForm(false);\r\n  };\r\n\r\n  return (\r\n    <div key={tasklist.id}>\r\n      <Draggable\r\n        type=\"tasklist\"\r\n        draggableId={`Column-${tasklist.column_index.toString()}`}\r\n        index={index}\r\n        key={`Column-${tasklist.id.toString()}`}\r\n      >\r\n        {(provided) => (\r\n          <div\r\n            className=\"tasklist-container\"\r\n            {...provided.draggableProps}\r\n            ref={provided.innerRef}\r\n            {...provided.dragHandleProps}\r\n          >\r\n            <div className=\"tasklist-header\">{tasklist.name}</div>\r\n            <div className=\"tasklist-add-task--button\"></div>\r\n            <Droppable\r\n              type=\"task\"\r\n              droppableId={`${tasklist.id.toString()}-${index.toString()}`}\r\n            >\r\n              {(provided) => (\r\n                <div\r\n                  className=\"tasklist-task--list\"\r\n                  ref={provided.innerRef}\r\n                  {...provided.droppableProps}\r\n                >\r\n                  {tasklist.Tasks.map((task, index) => {\r\n                    return (\r\n                      <ColumnTaskItem\r\n                        task={task}\r\n                        index={index}\r\n                        setTasklistTasks={setTasklistTasks}\r\n                      />\r\n                    );\r\n                  })}\r\n                  {provided.placeholder}\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n\r\n            <div\r\n              className=\"tasklist-new-task--button\"\r\n              onClick={openTaskProjectFormModal}\r\n            >\r\n              + Add task\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Draggable>\r\n      <div>\r\n        <Modal\r\n          className=\"modal\"\r\n          style={{ backgroundColor: \"white\" }}\r\n          open={openTaskProjectForm}\r\n          onClose={closeTaskProjectFormModal}\r\n        >\r\n          <div className=\"modal-container\">\r\n            <AddTaskProjectForm\r\n              setTasklists={setTasklists}\r\n              setTasklistTasks={setTasklistTasks}\r\n              tasklistId={tasklist.id}\r\n              projectId={tasklist.project_id}\r\n              clickClose={closeTaskProjectFormModal}\r\n              open={openTaskProjectForm}\r\n            ></AddTaskProjectForm>\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColumnTasklist;\r\n","/mnt/c/Users/Chris/Desktop/methodic-frontend/src/components/tasks/ColumnTaskItem.js",["389","390","391","392","393"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport TaskDetailsForm from \"../tasks/TaskDetailsForm\";\r\nimport { Modal, responsiveFontSizes } from \"@material-ui/core\";\r\n\r\nconst ColumnTaskItem = ({ task, index }) => {\r\n  const [openTaskDetailForm, setOpenTaskDetailForm] = useState(false);\r\n\r\n  const openTaskDetailFormModal = () => {\r\n    setOpenTaskDetailForm(true);\r\n  };\r\n\r\n  const closeTaskDetailFormModal = () => {\r\n    setOpenTaskDetailForm(false);\r\n  };\r\n\r\n  return (\r\n    <div key={task.id}>\r\n      <Draggable\r\n        draggableId={`${task.id.toString()}`}\r\n        type=\"task\"\r\n        key={`${task.id}`}\r\n        //this index needs to pull from tasksArray\r\n        index={index}\r\n      >\r\n        {(provided, snapshot) => (\r\n          <div\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            ref={provided.innerRef}\r\n            className=\"task-project-item\"\r\n            onClick={openTaskDetailFormModal}\r\n          >\r\n            {task.name}\r\n          </div>\r\n        )}\r\n      </Draggable>\r\n      <div>\r\n        <Modal\r\n          open={openTaskDetailForm}\r\n          onClose={closeTaskDetailFormModal}\r\n          style={{ backgroundColor: \"white\" }}\r\n        >\r\n          <div className=\"modal-container\">\r\n            <TaskDetailsForm\r\n              // setTasks={setTasks}\r\n              // setTasklistTasks={setTasklistTasks}\r\n              task={task}\r\n              closeModal={closeTaskDetailFormModal}\r\n            />\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColumnTaskItem;\r\n",{"ruleId":"394","replacedBy":"395"},{"ruleId":"396","replacedBy":"397"},{"ruleId":"398","severity":1,"message":"399","line":4,"column":8,"nodeType":"400","messageId":"401","endLine":4,"endColumn":17},{"ruleId":"398","severity":1,"message":"402","line":22,"column":10,"nodeType":"400","messageId":"401","endLine":22,"endColumn":19},{"ruleId":"398","severity":1,"message":"403","line":23,"column":10,"nodeType":"400","messageId":"401","endLine":23,"endColumn":19},{"ruleId":"398","severity":1,"message":"404","line":24,"column":10,"nodeType":"400","messageId":"401","endLine":24,"endColumn":22},{"ruleId":"398","severity":1,"message":"405","line":25,"column":10,"nodeType":"400","messageId":"401","endLine":25,"endColumn":19},{"ruleId":"398","severity":1,"message":"406","line":14,"column":10,"nodeType":"400","messageId":"401","endLine":14,"endColumn":14},{"ruleId":"398","severity":1,"message":"407","line":1,"column":38,"nodeType":"400","messageId":"401","endLine":1,"endColumn":48},{"ruleId":"398","severity":1,"message":"408","line":3,"column":17,"nodeType":"400","messageId":"401","endLine":3,"endColumn":36},{"ruleId":"398","severity":1,"message":"409","line":7,"column":8,"nodeType":"400","messageId":"401","endLine":7,"endColumn":20},{"ruleId":"398","severity":1,"message":"410","line":9,"column":38,"nodeType":"400","messageId":"401","endLine":9,"endColumn":47},{"ruleId":"398","severity":1,"message":"411","line":10,"column":8,"nodeType":"400","messageId":"401","endLine":10,"endColumn":26},{"ruleId":"398","severity":1,"message":"412","line":11,"column":8,"nodeType":"400","messageId":"401","endLine":11,"endColumn":23},{"ruleId":"398","severity":1,"message":"413","line":18,"column":22,"nodeType":"400","messageId":"401","endLine":18,"endColumn":33},{"ruleId":"398","severity":1,"message":"414","line":18,"column":35,"nodeType":"400","messageId":"401","endLine":18,"endColumn":41},{"ruleId":"398","severity":1,"message":"415","line":20,"column":10,"nodeType":"400","messageId":"401","endLine":20,"endColumn":15},{"ruleId":"398","severity":1,"message":"416","line":24,"column":10,"nodeType":"400","messageId":"401","endLine":24,"endColumn":29},{"ruleId":"398","severity":1,"message":"417","line":25,"column":10,"nodeType":"400","messageId":"401","endLine":25,"endColumn":23},{"ruleId":"398","severity":1,"message":"418","line":25,"column":25,"nodeType":"400","messageId":"401","endLine":25,"endColumn":41},{"ruleId":"398","severity":1,"message":"419","line":26,"column":10,"nodeType":"400","messageId":"401","endLine":26,"endColumn":28},{"ruleId":"398","severity":1,"message":"420","line":39,"column":9,"nodeType":"400","messageId":"401","endLine":39,"endColumn":32},{"ruleId":"398","severity":1,"message":"421","line":43,"column":9,"nodeType":"400","messageId":"401","endLine":43,"endColumn":33},{"ruleId":"398","severity":1,"message":"422","line":78,"column":13,"nodeType":"400","messageId":"401","endLine":78,"endColumn":34},{"ruleId":"398","severity":1,"message":"423","line":80,"column":13,"nodeType":"400","messageId":"401","endLine":80,"endColumn":29},{"ruleId":"398","severity":1,"message":"424","line":82,"column":13,"nodeType":"400","messageId":"401","endLine":82,"endColumn":33},{"ruleId":"398","severity":1,"message":"425","line":83,"column":13,"nodeType":"400","messageId":"401","endLine":83,"endColumn":28},{"ruleId":"398","severity":1,"message":"426","line":164,"column":11,"nodeType":"400","messageId":"401","endLine":164,"endColumn":25},{"ruleId":"398","severity":1,"message":"427","line":166,"column":11,"nodeType":"400","messageId":"401","endLine":166,"endColumn":29},{"ruleId":"398","severity":1,"message":"423","line":167,"column":11,"nodeType":"400","messageId":"401","endLine":167,"endColumn":27},{"ruleId":"398","severity":1,"message":"428","line":168,"column":11,"nodeType":"400","messageId":"401","endLine":168,"endColumn":24},{"ruleId":"398","severity":1,"message":"429","line":170,"column":11,"nodeType":"400","messageId":"401","endLine":170,"endColumn":26},{"ruleId":"398","severity":1,"message":"430","line":180,"column":11,"nodeType":"400","messageId":"401","endLine":180,"endColumn":27},{"ruleId":"398","severity":1,"message":"431","line":202,"column":9,"nodeType":"400","messageId":"401","endLine":202,"endColumn":21},{"ruleId":"398","severity":1,"message":"432","line":216,"column":9,"nodeType":"400","messageId":"401","endLine":216,"endColumn":33},{"ruleId":"398","severity":1,"message":"433","line":220,"column":9,"nodeType":"400","messageId":"401","endLine":220,"endColumn":34},{"ruleId":"398","severity":1,"message":"434","line":8,"column":8,"nodeType":"400","messageId":"401","endLine":8,"endColumn":19},{"ruleId":"398","severity":1,"message":"435","line":9,"column":8,"nodeType":"400","messageId":"401","endLine":9,"endColumn":22},{"ruleId":"398","severity":1,"message":"436","line":10,"column":8,"nodeType":"400","messageId":"401","endLine":10,"endColumn":17},{"ruleId":"398","severity":1,"message":"437","line":12,"column":10,"nodeType":"400","messageId":"401","endLine":12,"endColumn":29},{"ruleId":"398","severity":1,"message":"438","line":5,"column":8,"nodeType":"400","messageId":"401","endLine":5,"endColumn":19},{"ruleId":"398","severity":1,"message":"439","line":9,"column":10,"nodeType":"400","messageId":"401","endLine":9,"endColumn":21},{"ruleId":"398","severity":1,"message":"440","line":13,"column":10,"nodeType":"400","messageId":"401","endLine":13,"endColumn":17},{"ruleId":"398","severity":1,"message":"441","line":15,"column":10,"nodeType":"400","messageId":"401","endLine":15,"endColumn":14},{"ruleId":"398","severity":1,"message":"442","line":47,"column":9,"nodeType":"400","messageId":"401","endLine":47,"endColumn":19},{"ruleId":"398","severity":1,"message":"443","line":32,"column":9,"nodeType":"400","messageId":"401","endLine":32,"endColumn":15},{"ruleId":"398","severity":1,"message":"444","line":4,"column":10,"nodeType":"400","messageId":"401","endLine":4,"endColumn":21},{"ruleId":"398","severity":1,"message":"445","line":7,"column":8,"nodeType":"400","messageId":"401","endLine":7,"endColumn":19},{"ruleId":"398","severity":1,"message":"446","line":8,"column":8,"nodeType":"400","messageId":"401","endLine":8,"endColumn":16},{"ruleId":"398","severity":1,"message":"447","line":17,"column":10,"nodeType":"400","messageId":"401","endLine":17,"endColumn":18},{"ruleId":"398","severity":1,"message":"448","line":19,"column":10,"nodeType":"400","messageId":"401","endLine":19,"endColumn":21},{"ruleId":"398","severity":1,"message":"449","line":20,"column":10,"nodeType":"400","messageId":"401","endLine":20,"endColumn":18},{"ruleId":"398","severity":1,"message":"450","line":21,"column":21,"nodeType":"400","messageId":"401","endLine":21,"endColumn":33},{"ruleId":"398","severity":1,"message":"451","line":23,"column":9,"nodeType":"400","messageId":"401","endLine":23,"endColumn":22},{"ruleId":"398","severity":1,"message":"452","line":28,"column":9,"nodeType":"400","messageId":"401","endLine":28,"endColumn":23},{"ruleId":"398","severity":1,"message":"453","line":32,"column":9,"nodeType":"400","messageId":"401","endLine":32,"endColumn":25},{"ruleId":"398","severity":1,"message":"454","line":36,"column":9,"nodeType":"400","messageId":"401","endLine":36,"endColumn":26},{"ruleId":"398","severity":1,"message":"455","line":40,"column":9,"nodeType":"400","messageId":"401","endLine":40,"endColumn":23},{"ruleId":"398","severity":1,"message":"456","line":1,"column":29,"nodeType":"400","messageId":"401","endLine":1,"endColumn":38},{"ruleId":"398","severity":1,"message":"444","line":4,"column":10,"nodeType":"400","messageId":"401","endLine":4,"endColumn":21},{"ruleId":"398","severity":1,"message":"445","line":10,"column":8,"nodeType":"400","messageId":"401","endLine":10,"endColumn":19},{"ruleId":"398","severity":1,"message":"446","line":11,"column":8,"nodeType":"400","messageId":"401","endLine":11,"endColumn":16},{"ruleId":"398","severity":1,"message":"457","line":12,"column":8,"nodeType":"400","messageId":"401","endLine":12,"endColumn":17},{"ruleId":"398","severity":1,"message":"450","line":17,"column":21,"nodeType":"400","messageId":"401","endLine":17,"endColumn":33},{"ruleId":"398","severity":1,"message":"447","line":19,"column":10,"nodeType":"400","messageId":"401","endLine":19,"endColumn":18},{"ruleId":"398","severity":1,"message":"448","line":21,"column":10,"nodeType":"400","messageId":"401","endLine":21,"endColumn":21},{"ruleId":"398","severity":1,"message":"449","line":22,"column":10,"nodeType":"400","messageId":"401","endLine":22,"endColumn":18},{"ruleId":"398","severity":1,"message":"458","line":23,"column":9,"nodeType":"400","messageId":"401","endLine":23,"endColumn":15},{"ruleId":"398","severity":1,"message":"451","line":31,"column":9,"nodeType":"400","messageId":"401","endLine":31,"endColumn":22},{"ruleId":"398","severity":1,"message":"452","line":36,"column":9,"nodeType":"400","messageId":"401","endLine":36,"endColumn":23},{"ruleId":"398","severity":1,"message":"453","line":40,"column":9,"nodeType":"400","messageId":"401","endLine":40,"endColumn":25},{"ruleId":"398","severity":1,"message":"454","line":44,"column":9,"nodeType":"400","messageId":"401","endLine":44,"endColumn":26},{"ruleId":"398","severity":1,"message":"455","line":48,"column":9,"nodeType":"400","messageId":"401","endLine":48,"endColumn":23},{"ruleId":"398","severity":1,"message":"444","line":6,"column":10,"nodeType":"400","messageId":"401","endLine":6,"endColumn":21},{"ruleId":"398","severity":1,"message":"445","line":9,"column":8,"nodeType":"400","messageId":"401","endLine":9,"endColumn":19},{"ruleId":"398","severity":1,"message":"446","line":10,"column":8,"nodeType":"400","messageId":"401","endLine":10,"endColumn":16},{"ruleId":"398","severity":1,"message":"450","line":17,"column":21,"nodeType":"400","messageId":"401","endLine":17,"endColumn":33},{"ruleId":"398","severity":1,"message":"459","line":19,"column":21,"nodeType":"400","messageId":"401","endLine":19,"endColumn":33},{"ruleId":"398","severity":1,"message":"447","line":22,"column":10,"nodeType":"400","messageId":"401","endLine":22,"endColumn":18},{"ruleId":"398","severity":1,"message":"448","line":24,"column":10,"nodeType":"400","messageId":"401","endLine":24,"endColumn":21},{"ruleId":"398","severity":1,"message":"449","line":25,"column":10,"nodeType":"400","messageId":"401","endLine":25,"endColumn":18},{"ruleId":"398","severity":1,"message":"451","line":27,"column":9,"nodeType":"400","messageId":"401","endLine":27,"endColumn":22},{"ruleId":"398","severity":1,"message":"452","line":32,"column":9,"nodeType":"400","messageId":"401","endLine":32,"endColumn":23},{"ruleId":"398","severity":1,"message":"453","line":36,"column":9,"nodeType":"400","messageId":"401","endLine":36,"endColumn":25},{"ruleId":"398","severity":1,"message":"454","line":40,"column":9,"nodeType":"400","messageId":"401","endLine":40,"endColumn":26},{"ruleId":"398","severity":1,"message":"455","line":44,"column":9,"nodeType":"400","messageId":"401","endLine":44,"endColumn":23},{"ruleId":"398","severity":1,"message":"456","line":1,"column":39,"nodeType":"400","messageId":"401","endLine":1,"endColumn":48},{"ruleId":"398","severity":1,"message":"441","line":14,"column":10,"nodeType":"400","messageId":"401","endLine":14,"endColumn":14},{"ruleId":"398","severity":1,"message":"460","line":14,"column":16,"nodeType":"400","messageId":"401","endLine":14,"endColumn":23},{"ruleId":"398","severity":1,"message":"440","line":15,"column":10,"nodeType":"400","messageId":"401","endLine":15,"endColumn":17},{"ruleId":"398","severity":1,"message":"461","line":15,"column":19,"nodeType":"400","messageId":"401","endLine":15,"endColumn":29},{"ruleId":"398","severity":1,"message":"462","line":18,"column":24,"nodeType":"400","messageId":"401","endLine":18,"endColumn":39},{"ruleId":"398","severity":1,"message":"463","line":26,"column":9,"nodeType":"400","messageId":"401","endLine":26,"endColumn":13},{"ruleId":"398","severity":1,"message":"464","line":171,"column":9,"nodeType":"400","messageId":"401","endLine":171,"endColumn":19},{"ruleId":"398","severity":1,"message":"441","line":7,"column":10,"nodeType":"400","messageId":"401","endLine":7,"endColumn":14},{"ruleId":"398","severity":1,"message":"442","line":13,"column":9,"nodeType":"400","messageId":"401","endLine":13,"endColumn":19},{"ruleId":"398","severity":1,"message":"402","line":18,"column":10,"nodeType":"400","messageId":"401","endLine":18,"endColumn":19},{"ruleId":"398","severity":1,"message":"465","line":7,"column":3,"nodeType":"400","messageId":"401","endLine":7,"endColumn":28},{"ruleId":"398","severity":1,"message":"466","line":8,"column":3,"nodeType":"400","messageId":"401","endLine":8,"endColumn":23},{"ruleId":"398","severity":1,"message":"402","line":16,"column":10,"nodeType":"400","messageId":"401","endLine":16,"endColumn":19},{"ruleId":"398","severity":1,"message":"467","line":23,"column":9,"nodeType":"400","messageId":"401","endLine":23,"endColumn":18},{"ruleId":"398","severity":1,"message":"468","line":8,"column":21,"nodeType":"400","messageId":"401","endLine":8,"endColumn":36},{"ruleId":"398","severity":1,"message":"469","line":13,"column":24,"nodeType":"400","messageId":"401","endLine":13,"endColumn":39},{"ruleId":"398","severity":1,"message":"470","line":14,"column":25,"nodeType":"400","messageId":"401","endLine":14,"endColumn":41},{"ruleId":"398","severity":1,"message":"462","line":15,"column":24,"nodeType":"400","messageId":"401","endLine":15,"endColumn":39},{"ruleId":"398","severity":1,"message":"402","line":16,"column":10,"nodeType":"400","messageId":"401","endLine":16,"endColumn":19},{"ruleId":"398","severity":1,"message":"402","line":8,"column":10,"nodeType":"400","messageId":"401","endLine":8,"endColumn":19},{"ruleId":"398","severity":1,"message":"471","line":57,"column":11,"nodeType":"400","messageId":"401","endLine":57,"endColumn":23},{"ruleId":"398","severity":1,"message":"405","line":10,"column":10,"nodeType":"400","messageId":"401","endLine":10,"endColumn":19},{"ruleId":"398","severity":1,"message":"407","line":1,"column":17,"nodeType":"400","messageId":"401","endLine":1,"endColumn":27},{"ruleId":"398","severity":1,"message":"468","line":7,"column":21,"nodeType":"400","messageId":"401","endLine":7,"endColumn":36},{"ruleId":"398","severity":1,"message":"404","line":12,"column":10,"nodeType":"400","messageId":"401","endLine":12,"endColumn":22},{"ruleId":"398","severity":1,"message":"456","line":1,"column":17,"nodeType":"400","messageId":"401","endLine":1,"endColumn":26},{"ruleId":"398","severity":1,"message":"407","line":1,"column":38,"nodeType":"400","messageId":"401","endLine":1,"endColumn":48},{"ruleId":"398","severity":1,"message":"472","line":2,"column":10,"nodeType":"400","messageId":"401","endLine":2,"endColumn":25},{"ruleId":"398","severity":1,"message":"408","line":3,"column":17,"nodeType":"400","messageId":"401","endLine":3,"endColumn":36},{"ruleId":"398","severity":1,"message":"417","line":9,"column":10,"nodeType":"400","messageId":"401","endLine":9,"endColumn":23},{"ruleId":"398","severity":1,"message":"456","line":1,"column":17,"nodeType":"400","messageId":"401","endLine":1,"endColumn":26},{"ruleId":"398","severity":1,"message":"407","line":1,"column":38,"nodeType":"400","messageId":"401","endLine":1,"endColumn":48},{"ruleId":"398","severity":1,"message":"472","line":2,"column":10,"nodeType":"400","messageId":"401","endLine":2,"endColumn":25},{"ruleId":"398","severity":1,"message":"473","line":2,"column":27,"nodeType":"400","messageId":"401","endLine":2,"endColumn":36},{"ruleId":"398","severity":1,"message":"408","line":4,"column":17,"nodeType":"400","messageId":"401","endLine":4,"endColumn":36},"no-native-reassign",["474"],"no-negated-in-lhs",["475"],"no-unused-vars","'TasksPage' is defined but never used.","Identifier","unusedVar","'taskState' is assigned a value but never used.","'userState' is assigned a value but never used.","'projectState' is assigned a value but never used.","'teamState' is assigned a value but never used.","'team' is assigned a value but never used.","'useContext' is defined but never used.","'responsiveFontSizes' is defined but never used.","'TaskListItem' is defined but never used.","'Draggable' is defined but never used.","'AddTaskProjectForm' is defined but never used.","'TaskDetailsForm' is defined but never used.","'projectName' is assigned a value but never used.","'teamId' is assigned a value but never used.","'tasks' is assigned a value but never used.","'openTaskProjectForm' is assigned a value but never used.","'tasklistTasks' is assigned a value but never used.","'setTasklistTasks' is assigned a value but never used.","'openTaskDetailForm' is assigned a value but never used.","'openTaskDetailFormModal' is assigned a value but never used.","'closeTaskDetailFormModal' is assigned a value but never used.","'destinationTasklistId' is assigned a value but never used.","'sourceTasklistId' is assigned a value but never used.","'destinationTaskIndex' is assigned a value but never used.","'sourceTaskIndex' is assigned a value but never used.","'sourceColumnId' is assigned a value but never used.","'destinationIndexId' is assigned a value but never used.","'sourceIndexId' is assigned a value but never used.","'updatedTasklist' is assigned a value but never used.","'updatedTaskIndex' is assigned a value but never used.","'getTasklists' is assigned a value but never used.","'openTaskProjectFormModal' is assigned a value but never used.","'closeTaskProjectFormModal' is assigned a value but never used.","'ProjectTile' is defined but never used.","'NewProjectTile' is defined but never used.","'homeImage' is defined but never used.","'AiOutlinePlusCircle' is defined but never used.","'TaskSection' is defined but never used.","'RiNurseFill' is defined but never used.","'loading' is assigned a value but never used.","'open' is assigned a value but never used.","'closeModal' is assigned a value but never used.","'onSkip' is assigned a value but never used.","'GrAddCircle' is defined but never used.","'ProjectForm' is defined but never used.","'TaskForm' is defined but never used.","'anchorEl' is assigned a value but never used.","'openProject' is assigned a value but never used.","'openTask' is assigned a value but never used.","'userdispatch' is assigned a value but never used.","'clickOpenTask' is assigned a value but never used.","'clickCloseTask' is assigned a value but never used.","'clickOpenProject' is assigned a value but never used.","'clickCloseProject' is assigned a value but never used.","'handleNewClick' is assigned a value but never used.","'useEffect' is defined but never used.","'apiServer' is defined but never used.","'userId' is assigned a value but never used.","'taskdispatch' is assigned a value but never used.","'setOpen' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'projectdispatch' is assigned a value but never used.","'date' is assigned a value but never used.","'DateButton' is assigned a value but never used.","'RiCheckboxBlankCircleLine' is defined but never used.","'RiCheckboxCircleLine' is defined but never used.","'openModal' is assigned a value but never used.","'TasklistContext' is defined but never used.","'setProjectError' is assigned a value but never used.","'setAssigneeError' is assigned a value but never used.","'taskResponse' is assigned a value but never used.","'DragDropContext' is defined but never used.","'Droppable' is defined but never used.","no-global-assign","no-unsafe-negation"]